{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\shank\\\\surprise\\\\src\\\\Pages\\\\Page3.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport './Page3.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MemoryMatch = () => {\n  _s();\n  // Define 8 different smiley emojis for the cards\n  const smileys = ['üíã', 'üåπ', 'üåª', '‚òòÔ∏è', 'üòç', '‚ù§Ô∏è', 'üíò', 'üíê'];\n\n  // Create 16 cards (8 pairs) by duplicating the smileys\n  const [cards, setCards] = useState([...smileys, ...smileys] // Create pairs\n  .map((content, index) => ({\n    id: index,\n    content,\n    isFlipped: false\n  })).sort(() => Math.random() - 0.5) // Shuffle cards randomly\n  );\n  const [flippedCards, setFlippedCards] = useState([]); // To keep track of flipped cards\n  const [matchedCards, setMatchedCards] = useState([]); // To store matched cards\n  const navigate = useNavigate(); // Navigate hook to handle game completion\n  const [isMusicPlaying, setIsMusicPlaying] = useState(false);\n  const flipCard = id => {\n    // Do nothing if card is already flipped or it's matched\n    if (flippedCards.length === 2 || matchedCards.includes(id) || cards.find(card => card.id === id).isFlipped) return;\n    const newCards = [...cards];\n    const cardIndex = newCards.findIndex(card => card.id === id);\n    newCards[cardIndex].isFlipped = true;\n    setCards(newCards);\n\n    // Add flipped card to the list\n    setFlippedCards(prev => [...prev, id]);\n    if (flippedCards.length === 1) {\n      // Compare the last two flipped cards\n      const firstCard = cards.find(card => card.id === flippedCards[0]);\n      const secondCard = cards.find(card => card.id === id);\n      if (firstCard.content === secondCard.content) {\n        // Cards match, mark them as matched\n        setMatchedCards(prev => [...prev, firstCard.id, secondCard.id]);\n      } else {\n        // If no match, flip them back after a delay\n        setTimeout(() => {\n          const resetCards = [...cards];\n          resetCards[cardIndex].isFlipped = false;\n          resetCards[cards.findIndex(card => card.id === flippedCards[0])].isFlipped = false;\n          setCards(resetCards);\n        }, 1000);\n      }\n\n      // Reset flipped cards\n      setFlippedCards([]);\n    }\n  };\n\n  // Check if the game is won\n  if (matchedCards.length === cards.length) {\n    // Redirect to next page when all pairs are matched\n    setTimeout(() => navigate('/game'), 1000);\n  }\n  // Start the music on user interaction\n  useEffect(() => {\n    const handleUserInteraction = () => {\n      const audioElement = document.getElementById('romantic-music');\n      if (audioElement) {\n        audioElement.play();\n        setIsMusicPlaying(true);\n        window.removeEventListener('click', handleUserInteraction); // Remove the listener after it triggers once\n      }\n    };\n    window.addEventListener('click', handleUserInteraction);\n    return () => {\n      window.removeEventListener('click', handleUserInteraction); // Cleanup event listener when the component unmounts\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"audio\", {\n      id: \"romantic-music\",\n      loop: true,\n      children: [/*#__PURE__*/_jsxDEV(\"source\", {\n        src: \"/assets/romantic-music.mp3\",\n        type: \"audio/mp3\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this), \"Your browser does not support the audio element.\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Match the Smileys!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-grid\",\n      children: cards.map(card => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card\",\n        onClick: () => flipCard(card.id),\n        children: card.isFlipped || matchedCards.includes(card.id) ? card.content // Display the smiley when flipped or matched\n        : '‚ùì' // Display a question mark when the card is not flipped\n      }, card.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n};\n_s(MemoryMatch, \"B3CKO8x7+/jPFsiQuS1bGkIHd0o=\", false, function () {\n  return [useNavigate];\n});\n_c = MemoryMatch;\nexport default MemoryMatch;\nvar _c;\n$RefreshReg$(_c, \"MemoryMatch\");","map":{"version":3,"names":["React","useState","useNavigate","jsxDEV","_jsxDEV","MemoryMatch","_s","smileys","cards","setCards","map","content","index","id","isFlipped","sort","Math","random","flippedCards","setFlippedCards","matchedCards","setMatchedCards","navigate","isMusicPlaying","setIsMusicPlaying","flipCard","length","includes","find","card","newCards","cardIndex","findIndex","prev","firstCard","secondCard","setTimeout","resetCards","useEffect","handleUserInteraction","audioElement","document","getElementById","play","window","removeEventListener","addEventListener","className","children","loop","src","type","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["C:/Users/shank/surprise/src/Pages/Page3.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport './Page3.css';\r\n\r\nconst MemoryMatch = () => {\r\n  // Define 8 different smiley emojis for the cards\r\n  const smileys = [\r\n    'üíã','üåπ','üåª','‚òòÔ∏è', 'üòç', '‚ù§Ô∏è','üíò','üíê'\r\n  ];\r\n\r\n  // Create 16 cards (8 pairs) by duplicating the smileys\r\n  const [cards, setCards] = useState(\r\n    [...smileys, ...smileys] // Create pairs\r\n      .map((content, index) => ({ id: index, content, isFlipped: false }))\r\n      .sort(() => Math.random() - 0.5) // Shuffle cards randomly\r\n  );\r\n\r\n  const [flippedCards, setFlippedCards] = useState([]); // To keep track of flipped cards\r\n  const [matchedCards, setMatchedCards] = useState([]); // To store matched cards\r\n  const navigate = useNavigate(); // Navigate hook to handle game completion\r\n  const [isMusicPlaying, setIsMusicPlaying] = useState(false);\r\n\r\n  const flipCard = (id) => {\r\n    // Do nothing if card is already flipped or it's matched\r\n    if (flippedCards.length === 2 || matchedCards.includes(id) || cards.find(card => card.id === id).isFlipped) return;\r\n\r\n    const newCards = [...cards];\r\n    const cardIndex = newCards.findIndex(card => card.id === id);\r\n    newCards[cardIndex].isFlipped = true;\r\n    setCards(newCards);\r\n\r\n    // Add flipped card to the list\r\n    setFlippedCards(prev => [...prev, id]);\r\n\r\n    if (flippedCards.length === 1) {\r\n      // Compare the last two flipped cards\r\n      const firstCard = cards.find(card => card.id === flippedCards[0]);\r\n      const secondCard = cards.find(card => card.id === id);\r\n\r\n      if (firstCard.content === secondCard.content) {\r\n        // Cards match, mark them as matched\r\n        setMatchedCards(prev => [...prev, firstCard.id, secondCard.id]);\r\n      } else {\r\n        // If no match, flip them back after a delay\r\n        setTimeout(() => {\r\n          const resetCards = [...cards];\r\n          resetCards[cardIndex].isFlipped = false;\r\n          resetCards[cards.findIndex(card => card.id === flippedCards[0])].isFlipped = false;\r\n          setCards(resetCards);\r\n        }, 1000);\r\n      }\r\n\r\n      // Reset flipped cards\r\n      setFlippedCards([]);\r\n    }\r\n  };\r\n\r\n  // Check if the game is won\r\n  if (matchedCards.length === cards.length) {\r\n    // Redirect to next page when all pairs are matched\r\n    setTimeout(() => navigate('/game'), 1000);\r\n  }\r\n  // Start the music on user interaction\r\n    useEffect(() => {\r\n      const handleUserInteraction = () => {\r\n        const audioElement = document.getElementById('romantic-music');\r\n        if (audioElement) {\r\n          audioElement.play();\r\n          setIsMusicPlaying(true);\r\n          window.removeEventListener('click', handleUserInteraction); // Remove the listener after it triggers once\r\n        }\r\n      };\r\n  \r\n      window.addEventListener('click', handleUserInteraction);\r\n  \r\n      return () => {\r\n        window.removeEventListener('click', handleUserInteraction); // Cleanup event listener when the component unmounts\r\n      };\r\n    }, []);\r\n\r\n  return (\r\n    \r\n    <div className=\"game-container\">\r\n      {/* Background music element */} \r\n      <audio id=\"romantic-music\" loop>\r\n        <source src=\"/assets/romantic-music.mp3\" type=\"audio/mp3\" />\r\n        Your browser does not support the audio element.\r\n      </audio>\r\n      <h2>Match the Smileys!</h2>\r\n      <div className=\"card-grid\">\r\n        {cards.map(card => (\r\n          <div\r\n            className=\"card\"\r\n            key={card.id}\r\n            onClick={() => flipCard(card.id)}\r\n          >\r\n            {card.isFlipped || matchedCards.includes(card.id) ? (\r\n              card.content // Display the smiley when flipped or matched\r\n            ) : (\r\n              '‚ùì' // Display a question mark when the card is not flipped\r\n            )}\r\n          </div>\r\n        ))}\r\n      </div>\r\n\r\n     \r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MemoryMatch;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}