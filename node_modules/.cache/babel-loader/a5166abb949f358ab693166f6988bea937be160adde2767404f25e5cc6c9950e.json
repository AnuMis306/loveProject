{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\shank\\\\surprise\\\\src\\\\Pages\\\\PuzzleGame.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\n\n// Generate a random candy color for the game board\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst generateRandomCandy = () => {\n  const colors = ['red', 'blue', 'green', 'yellow', 'purple', 'orange'];\n  return colors[Math.floor(Math.random() * colors.length)];\n};\nconst GamePage = ({\n  level\n}) => {\n  _s();\n  const [gameBoard, setGameBoard] = useState([]);\n  const [isGameWon, setIsGameWon] = useState(false);\n  const [score, setScore] = useState(0);\n  const navigate = useNavigate();\n\n  // Initialize the board with random candies\n  const initializeBoard = () => {\n    const board = [];\n    for (let row = 0; row < 8; row++) {\n      const rowArray = [];\n      for (let col = 0; col < 8; col++) {\n        rowArray.push(generateRandomCandy());\n      }\n      board.push(rowArray);\n    }\n    setGameBoard(board);\n  };\n\n  // Check for matches (three or more candies in a row or column)\n  const checkMatches = () => {\n    let newBoard = [...gameBoard];\n    let matches = [];\n\n    // Horizontal match check\n    for (let row = 0; row < 8; row++) {\n      for (let col = 0; col < 6; col++) {\n        if (newBoard[row][col] === newBoard[row][col + 1] && newBoard[row][col] === newBoard[row][col + 2]) {\n          matches.push([row, col], [row, col + 1], [row, col + 2]);\n        }\n      }\n    }\n\n    // Vertical match check\n    for (let col = 0; col < 8; col++) {\n      for (let row = 0; row < 6; row++) {\n        if (newBoard[row][col] === newBoard[row + 1][col] && newBoard[row][col] === newBoard[row + 2][col]) {\n          matches.push([row, col], [row + 1, col], [row + 2, col]);\n        }\n      }\n    }\n    if (matches.length > 0) {\n      // Mark matched candies as null (clearing them)\n      matches.forEach(([row, col]) => {\n        newBoard[row][col] = null;\n      });\n      setGameBoard(newBoard);\n      return true;\n    }\n    return false;\n  };\n\n  // After matching candies, drop new ones to fill empty spots\n  const dropCandies = () => {\n    let newBoard = [...gameBoard];\n    for (let col = 0; col < 8; col++) {\n      // Fill empty spots by shifting candies down\n      for (let row = 7; row >= 0; row--) {\n        if (newBoard[row][col] === null) {\n          for (let r = row - 1; r >= 0; r--) {\n            if (newBoard[r][col] !== null) {\n              newBoard[row][col] = newBoard[r][col];\n              newBoard[r][col] = null;\n              break;\n            }\n          }\n        }\n      }\n    }\n    setGameBoard(newBoard);\n  };\n\n  // Check if the game is won (e.g., if the board is filled)\n  const checkWin = () => {\n    const filled = gameBoard.every(row => row.every(cell => cell !== null));\n    if (filled) {\n      setIsGameWon(true);\n    }\n  };\n\n  // Handle candy click (swap candies)\n  const handleCandyClick = (row, col) => {\n    // Placeholder logic for swapping candies (can be expanded)\n    let newBoard = [...gameBoard];\n    // Swap logic (for simplicity, just swap adjacent candies)\n    if (row < 7) {\n      let temp = newBoard[row][col];\n      newBoard[row][col] = newBoard[row + 1][col];\n      newBoard[row + 1][col] = temp;\n      setGameBoard(newBoard);\n      // Check if the swap resulted in matches\n      if (!checkMatches()) {\n        // If no match, swap back\n        temp = newBoard[row][col];\n        newBoard[row][col] = newBoard[row + 1][col];\n        newBoard[row + 1][col] = temp;\n        setGameBoard(newBoard);\n      } else {\n        // After matching, drop new candies\n        dropCandies();\n        checkWin();\n      }\n    }\n  };\n  useEffect(() => {\n    initializeBoard();\n  }, [level]);\n  useEffect(() => {\n    if (isGameWon) {\n      setTimeout(() => {\n        if (level === 3) {\n          alert(\"Congratulations, you completed all levels!\");\n        } else {\n          navigate(`/level${level + 1}`);\n        }\n      }, 1000);\n    }\n  }, [isGameWon, navigate, level]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Level \", level]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-board\",\n      children: gameBoard.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-row\",\n        children: row.map((cell, colIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"game-cell\",\n          style: {\n            backgroundColor: cell\n          },\n          onClick: () => handleCandyClick(rowIndex, colIndex)\n        }, colIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 15\n        }, this))\n      }, rowIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }, this), isGameWon && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"win-message\",\n      children: \"You Won this Level!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 21\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 139,\n    columnNumber: 5\n  }, this);\n};\n_s(GamePage, \"dP3V8T7nFNWO7RZoHgEXZZn1qrE=\", false, function () {\n  return [useNavigate];\n});\n_c = GamePage;\nexport default GamePage;\nvar _c;\n$RefreshReg$(_c, \"GamePage\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","jsxDEV","_jsxDEV","generateRandomCandy","colors","Math","floor","random","length","GamePage","level","_s","gameBoard","setGameBoard","isGameWon","setIsGameWon","score","setScore","navigate","initializeBoard","board","row","rowArray","col","push","checkMatches","newBoard","matches","forEach","dropCandies","r","checkWin","filled","every","cell","handleCandyClick","temp","setTimeout","alert","children","fileName","_jsxFileName","lineNumber","columnNumber","className","map","rowIndex","colIndex","style","backgroundColor","onClick","_c","$RefreshReg$"],"sources":["C:/Users/shank/surprise/src/Pages/PuzzleGame.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\n// Generate a random candy color for the game board\r\nconst generateRandomCandy = () => {\r\n  const colors = ['red', 'blue', 'green', 'yellow', 'purple', 'orange'];\r\n  return colors[Math.floor(Math.random() * colors.length)];\r\n};\r\n\r\nconst GamePage = ({ level }) => {\r\n  const [gameBoard, setGameBoard] = useState([]);\r\n  const [isGameWon, setIsGameWon] = useState(false);\r\n  const [score, setScore] = useState(0);\r\n  const navigate = useNavigate();\r\n\r\n  // Initialize the board with random candies\r\n  const initializeBoard = () => {\r\n    const board = [];\r\n    for (let row = 0; row < 8; row++) {\r\n      const rowArray = [];\r\n      for (let col = 0; col < 8; col++) {\r\n        rowArray.push(generateRandomCandy());\r\n      }\r\n      board.push(rowArray);\r\n    }\r\n    setGameBoard(board);\r\n  };\r\n\r\n  // Check for matches (three or more candies in a row or column)\r\n  const checkMatches = () => {\r\n    let newBoard = [...gameBoard];\r\n    let matches = [];\r\n\r\n    // Horizontal match check\r\n    for (let row = 0; row < 8; row++) {\r\n      for (let col = 0; col < 6; col++) {\r\n        if (\r\n          newBoard[row][col] === newBoard[row][col + 1] &&\r\n          newBoard[row][col] === newBoard[row][col + 2]\r\n        ) {\r\n          matches.push([row, col], [row, col + 1], [row, col + 2]);\r\n        }\r\n      }\r\n    }\r\n\r\n    // Vertical match check\r\n    for (let col = 0; col < 8; col++) {\r\n      for (let row = 0; row < 6; row++) {\r\n        if (\r\n          newBoard[row][col] === newBoard[row + 1][col] &&\r\n          newBoard[row][col] === newBoard[row + 2][col]\r\n        ) {\r\n          matches.push([row, col], [row + 1, col], [row + 2, col]);\r\n        }\r\n      }\r\n    }\r\n\r\n    if (matches.length > 0) {\r\n      // Mark matched candies as null (clearing them)\r\n      matches.forEach(([row, col]) => {\r\n        newBoard[row][col] = null;\r\n      });\r\n      setGameBoard(newBoard);\r\n      return true;\r\n    }\r\n    return false;\r\n  };\r\n\r\n  // After matching candies, drop new ones to fill empty spots\r\n  const dropCandies = () => {\r\n    let newBoard = [...gameBoard];\r\n    for (let col = 0; col < 8; col++) {\r\n      // Fill empty spots by shifting candies down\r\n      for (let row = 7; row >= 0; row--) {\r\n        if (newBoard[row][col] === null) {\r\n          for (let r = row - 1; r >= 0; r--) {\r\n            if (newBoard[r][col] !== null) {\r\n              newBoard[row][col] = newBoard[r][col];\r\n              newBoard[r][col] = null;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    setGameBoard(newBoard);\r\n  };\r\n\r\n  // Check if the game is won (e.g., if the board is filled)\r\n  const checkWin = () => {\r\n    const filled = gameBoard.every(row => row.every(cell => cell !== null));\r\n    if (filled) {\r\n      setIsGameWon(true);\r\n    }\r\n  };\r\n\r\n  // Handle candy click (swap candies)\r\n  const handleCandyClick = (row, col) => {\r\n    // Placeholder logic for swapping candies (can be expanded)\r\n    let newBoard = [...gameBoard];\r\n    // Swap logic (for simplicity, just swap adjacent candies)\r\n    if (row < 7) {\r\n      let temp = newBoard[row][col];\r\n      newBoard[row][col] = newBoard[row + 1][col];\r\n      newBoard[row + 1][col] = temp;\r\n      setGameBoard(newBoard);\r\n      // Check if the swap resulted in matches\r\n      if (!checkMatches()) {\r\n        // If no match, swap back\r\n        temp = newBoard[row][col];\r\n        newBoard[row][col] = newBoard[row + 1][col];\r\n        newBoard[row + 1][col] = temp;\r\n        setGameBoard(newBoard);\r\n      } else {\r\n        // After matching, drop new candies\r\n        dropCandies();\r\n        checkWin();\r\n      }\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    initializeBoard();\r\n  }, [level]);\r\n\r\n  useEffect(() => {\r\n    if (isGameWon) {\r\n      setTimeout(() => {\r\n        if (level === 3) {\r\n          alert(\"Congratulations, you completed all levels!\");\r\n        } else {\r\n          navigate(`/level${level + 1}`);\r\n        }\r\n      }, 1000);\r\n    }\r\n  }, [isGameWon, navigate, level]);\r\n\r\n  return (\r\n    <div>\r\n      <h1>Level {level}</h1>\r\n      <div className=\"game-board\">\r\n        {gameBoard.map((row, rowIndex) => (\r\n          <div key={rowIndex} className=\"game-row\">\r\n            {row.map((cell, colIndex) => (\r\n              <div\r\n                key={colIndex}\r\n                className=\"game-cell\"\r\n                style={{ backgroundColor: cell }}\r\n                onClick={() => handleCandyClick(rowIndex, colIndex)}\r\n              />\r\n            ))}\r\n          </div>\r\n        ))}\r\n      </div>\r\n      {isGameWon && <div className=\"win-message\">You Won this Level!</div>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default GamePage;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}