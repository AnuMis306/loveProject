{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\shank\\\\surprise\\\\src\\\\Pages\\\\PuzzleGame.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport './PuzzleGame.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PuzzleGame = () => {\n  _s();\n  const navigate = useNavigate(); // Navigate hook to handle game completion\n  const [showHowToPlay, setShowHowToPlay] = useState(true);\n  const [gameStatus, setGameStatus] = useState(\"\"); // 'win' or 'lose'\n  const [grid, setGrid] = useState(generatePuzzle()); // Initialize with a valid puzzle\n  const [showSolution, setShowSolution] = useState(false); // Track whether to show the solution\n  const [isMusicPlaying, setIsMusicPlaying] = useState(false);\n\n  // Function to generate a solvable 3x3 Sudoku puzzle\n  function generatePuzzle() {\n    return [[1, 0, 3], [0, 3, 0], [0, 0, 2]];\n  }\n\n  // Function to generate the solved puzzle\n  function generateSolution() {\n    return [[1, 2, 3], [2, 3, 1], [3, 1, 2]];\n  }\n\n  // Toggle visibility of the How to Play instructions\n  const toggleHowToPlay = () => {\n    setShowHowToPlay(!showHowToPlay);\n  };\n\n  // Handle changes to the grid cells, but prevent editing pre-filled cells\n  const handleChange = (e, row, col) => {\n    const value = e.target.value;\n\n    // Only allow values 1, 2, or 3 (valid Sudoku values)\n    if (/^[1-3]$/.test(value) || value === '') {\n      // Allow empty input to clear a cell\n      if (grid[row][col] === 0) {\n        const newGrid = grid.map((rowArray, rowIndex) => rowIndex === row ? rowArray.map((cellValue, colIndex) => colIndex === col ? value === '' ? 0 : parseInt(value) : cellValue) : rowArray);\n        setGrid(newGrid);\n      }\n    }\n  };\n\n  // Check if the current grid is a valid solved puzzle\n  const checkSolution = () => {\n    const isValid = checkRows() && checkColumns();\n    if (isValid) {\n      setGameStatus(\"win\");\n      setTimeout(() => {\n        setTimeout(() => navigate('/game3'), 1000);\n      }, 500);\n    } else if (isGridFilled()) {\n      setGameStatus(\"lose\");\n      setTimeout(() => {\n        const retry = window.confirm(\"You lost! Do you want to try again?\");\n        if (retry) {\n          resetGame();\n        }\n      }, 500);\n    }\n  };\n\n  // Check if the grid is completely filled with numbers\n  const isGridFilled = () => {\n    return grid.every(row => row.every(cell => cell !== 0));\n  };\n\n  // Check if rows contain numbers 1 to 3 with no repetition\n  const checkRows = () => {\n    return grid.every(row => {\n      const uniqueValues = new Set(row);\n      return uniqueValues.size === row.length && !row.includes(0);\n    });\n  };\n\n  // Check if columns contain numbers 1 to 3 with no repetition\n  const checkColumns = () => {\n    for (let col = 0; col < 3; col++) {\n      const column = [grid[0][col], grid[1][col], grid[2][col]];\n      const uniqueValues = new Set(column);\n      if (uniqueValues.size !== column.length || column.includes(0)) {\n        return false;\n      }\n    }\n    return true;\n  };\n\n  // Reset the game grid to a new puzzle\n  const resetGame = () => {\n    setGameStatus(\"\"); // Reset game status\n    setGrid(generatePuzzle()); // Reset grid with a new valid puzzle\n  };\n\n  // Function to toggle showing the solution\n  const toggleSolution = () => {\n    setShowSolution(!showSolution);\n  };\n  const renderGrid = () => {\n    return grid.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: row.map((cell, colIndex) => /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        min: \"1\",\n        max: \"3\",\n        value: showSolution && cell === 0 ? generateSolution()[rowIndex][colIndex] : cell === 0 ? '' : cell,\n        onChange: e => handleChange(e, rowIndex, colIndex),\n        className: `cell ${cell !== 0 ? 'disabled' : ''}`,\n        disabled: cell !== 0 || showSolution // Disable editing for pre-filled cells or when showing the solution\n      }, colIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 11\n      }, this))\n    }, rowIndex, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this));\n  };\n\n  // Automatically check the solution when grid is filled\n  useEffect(() => {\n    if (isGridFilled()) {\n      checkSolution();\n    }\n  }, [grid]);\n\n  // Start the music on user interaction\n  useEffect(() => {\n    const handleUserInteraction = () => {\n      const audioElement = document.getElementById('romantic-music');\n      if (audioElement) {\n        audioElement.play();\n        setIsMusicPlaying(true);\n        window.removeEventListener('click', handleUserInteraction); // Remove the listener after it triggers once\n      }\n    };\n    window.addEventListener('click', handleUserInteraction);\n    return () => {\n      window.removeEventListener('click', handleUserInteraction); // Cleanup event listener when the component unmounts\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"puzzle-wrapper\",\n    children: [/*#__PURE__*/_jsxDEV(\"audio\", {\n      id: \"romantic-music\",\n      loop: true,\n      children: [/*#__PURE__*/_jsxDEV(\"source\", {\n        src: \"/assets/romantic-music.mp3\",\n        type: \"audio/mp3\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 9\n      }, this), \"Your browser does not support the audio element.\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"left-side\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"how-to-play-btn\",\n        onClick: toggleHowToPlay,\n        children: showHowToPlay ? 'Hide How to Play' : 'How to Play'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 9\n      }, this), showHowToPlay && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"how-to-play\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"How to Play:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 171,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"The goal of Sudoku is to fill the grid with numbers such that:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: [/*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"Each row contains the numbers 1 through 3 (without repeating).\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 176,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"Each column contains the numbers 1 through 3 (without repeating).\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 177,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Fill in the blanks and try to solve the puzzle!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"right-side\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"title\",\n        children: \"3x3 Sudoku\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"puzzle-container\",\n        children: renderGrid()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 9\n      }, this), gameStatus === \"win\" && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"win-message\",\n        children: \"You Win! Redirecting to a new game...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 34\n      }, this), gameStatus === \"lose\" && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"lose-message\",\n        children: \"Try again! You can do it!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 35\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 157,\n    columnNumber: 5\n  }, this);\n};\n_s(PuzzleGame, \"6zTY1734ftWJruC6i7AUjkobR5g=\", false, function () {\n  return [useNavigate];\n});\n_c = PuzzleGame;\nexport default PuzzleGame;\nvar _c;\n$RefreshReg$(_c, \"PuzzleGame\");","map":{"version":3,"names":["React","useState","useEffect","useNavigate","jsxDEV","_jsxDEV","PuzzleGame","_s","navigate","showHowToPlay","setShowHowToPlay","gameStatus","setGameStatus","grid","setGrid","generatePuzzle","showSolution","setShowSolution","isMusicPlaying","setIsMusicPlaying","generateSolution","toggleHowToPlay","handleChange","e","row","col","value","target","test","newGrid","map","rowArray","rowIndex","cellValue","colIndex","parseInt","checkSolution","isValid","checkRows","checkColumns","setTimeout","isGridFilled","retry","window","confirm","resetGame","every","cell","uniqueValues","Set","size","length","includes","column","toggleSolution","renderGrid","className","children","type","min","max","onChange","disabled","fileName","_jsxFileName","lineNumber","columnNumber","handleUserInteraction","audioElement","document","getElementById","play","removeEventListener","addEventListener","id","loop","src","onClick","_c","$RefreshReg$"],"sources":["C:/Users/shank/surprise/src/Pages/PuzzleGame.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport './PuzzleGame.css';\r\n\r\nconst PuzzleGame = () => {\r\n  const navigate = useNavigate(); // Navigate hook to handle game completion\r\n  const [showHowToPlay, setShowHowToPlay] = useState(true);\r\n  const [gameStatus, setGameStatus] = useState(\"\"); // 'win' or 'lose'\r\n  const [grid, setGrid] = useState(generatePuzzle()); // Initialize with a valid puzzle\r\n  const [showSolution, setShowSolution] = useState(false); // Track whether to show the solution\r\n  const [isMusicPlaying, setIsMusicPlaying] = useState(false);\r\n\r\n  // Function to generate a solvable 3x3 Sudoku puzzle\r\n  function generatePuzzle() {\r\n    return [\r\n      [1, 0, 3],\r\n      [0, 3, 0],\r\n      [0, 0, 2],\r\n    ];\r\n  }\r\n\r\n  // Function to generate the solved puzzle\r\n  function generateSolution() {\r\n    return [\r\n      [1, 2, 3],\r\n      [2, 3, 1],\r\n      [3, 1, 2],\r\n    ];\r\n  }\r\n\r\n  // Toggle visibility of the How to Play instructions\r\n  const toggleHowToPlay = () => {\r\n    setShowHowToPlay(!showHowToPlay);\r\n  };\r\n\r\n  // Handle changes to the grid cells, but prevent editing pre-filled cells\r\n  const handleChange = (e, row, col) => {\r\n    const value = e.target.value;\r\n  \r\n    // Only allow values 1, 2, or 3 (valid Sudoku values)\r\n    if (/^[1-3]$/.test(value) || value === '') { // Allow empty input to clear a cell\r\n      if (grid[row][col] === 0) {\r\n        const newGrid = grid.map((rowArray, rowIndex) =>\r\n          rowIndex === row\r\n            ? rowArray.map((cellValue, colIndex) =>\r\n                colIndex === col ? (value === '' ? 0 : parseInt(value)) : cellValue\r\n              )\r\n            : rowArray\r\n        );\r\n        setGrid(newGrid);\r\n      }\r\n    }\r\n  };\r\n  \r\n\r\n  // Check if the current grid is a valid solved puzzle\r\n  const checkSolution = () => {\r\n    const isValid = checkRows() && checkColumns();\r\n    if (isValid) {\r\n      setGameStatus(\"win\");\r\n      setTimeout(() => {\r\n        \r\n        setTimeout(() => navigate('/game3'), 1000);\r\n      }, 500);\r\n    } else if (isGridFilled()) {\r\n      setGameStatus(\"lose\");\r\n      setTimeout(() => {\r\n        const retry = window.confirm(\"You lost! Do you want to try again?\");\r\n        if (retry) {\r\n          resetGame();\r\n        }\r\n      }, 500);\r\n    }\r\n  };\r\n\r\n  // Check if the grid is completely filled with numbers\r\n  const isGridFilled = () => {\r\n    return grid.every(row => row.every(cell => cell !== 0));\r\n  };\r\n\r\n  // Check if rows contain numbers 1 to 3 with no repetition\r\n  const checkRows = () => {\r\n    return grid.every(row => {\r\n      const uniqueValues = new Set(row);\r\n      return uniqueValues.size === row.length && !row.includes(0);\r\n    });\r\n  };\r\n\r\n  // Check if columns contain numbers 1 to 3 with no repetition\r\n  const checkColumns = () => {\r\n    for (let col = 0; col < 3; col++) {\r\n      const column = [grid[0][col], grid[1][col], grid[2][col]];\r\n      const uniqueValues = new Set(column);\r\n      if (uniqueValues.size !== column.length || column.includes(0)) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  };\r\n\r\n  // Reset the game grid to a new puzzle\r\n  const resetGame = () => {\r\n    setGameStatus(\"\"); // Reset game status\r\n    setGrid(generatePuzzle()); // Reset grid with a new valid puzzle\r\n  };\r\n\r\n  // Function to toggle showing the solution\r\n  const toggleSolution = () => {\r\n    setShowSolution(!showSolution);\r\n  };\r\n\r\n  const renderGrid = () => {\r\n    return grid.map((row, rowIndex) => (\r\n      <div className=\"row\" key={rowIndex}>\r\n        {row.map((cell, colIndex) => (\r\n          <input\r\n            key={colIndex}\r\n            type=\"text\"\r\n            min=\"1\"\r\n            max=\"3\"\r\n            value={showSolution && cell === 0 ? generateSolution()[rowIndex][colIndex] : cell === 0 ? '' : cell}\r\n            onChange={(e) => handleChange(e, rowIndex, colIndex)}\r\n            className={`cell ${cell !== 0 ? 'disabled' : ''}`}\r\n            disabled={cell !== 0 || showSolution} // Disable editing for pre-filled cells or when showing the solution\r\n          />\r\n        ))}\r\n      </div>\r\n    ));\r\n  };\r\n\r\n  // Automatically check the solution when grid is filled\r\n  useEffect(() => {\r\n    if (isGridFilled()) {\r\n      checkSolution();\r\n    }\r\n  }, [grid]);\r\n\r\n  // Start the music on user interaction\r\n  useEffect(() => {\r\n    const handleUserInteraction = () => {\r\n      const audioElement = document.getElementById('romantic-music');\r\n      if (audioElement) {\r\n        audioElement.play();\r\n        setIsMusicPlaying(true);\r\n        window.removeEventListener('click', handleUserInteraction); // Remove the listener after it triggers once\r\n      }\r\n    };\r\n\r\n    window.addEventListener('click', handleUserInteraction);\r\n\r\n    return () => {\r\n      window.removeEventListener('click', handleUserInteraction); // Cleanup event listener when the component unmounts\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"puzzle-wrapper\">\r\n      {/* Background music element */} \r\n      <audio id=\"romantic-music\" loop>\r\n        <source src=\"/assets/romantic-music.mp3\" type=\"audio/mp3\" />\r\n        Your browser does not support the audio element.\r\n      </audio>\r\n\r\n      <div className=\"left-side\">\r\n        <button className=\"how-to-play-btn\" onClick={toggleHowToPlay}>\r\n          {showHowToPlay ? 'Hide How to Play' : 'How to Play'}\r\n        </button>\r\n\r\n        {showHowToPlay && (\r\n          <div className=\"how-to-play\">\r\n            <h2>How to Play:</h2>\r\n            <p>\r\n              The goal of Sudoku is to fill the grid with numbers such that:\r\n            </p>\r\n            <ul>\r\n              <li>Each row contains the numbers 1 through 3 (without repeating).</li>\r\n              <li>Each column contains the numbers 1 through 3 (without repeating).</li>\r\n            </ul>\r\n            <p>Fill in the blanks and try to solve the puzzle!</p>\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      <div className=\"right-side\">\r\n        <h1 className=\"title\">3x3 Sudoku</h1>\r\n        <div className=\"puzzle-container\">{renderGrid()}</div>\r\n        {gameStatus === \"win\" && <div className=\"win-message\">You Win! Redirecting to a new game...</div>}\r\n        {gameStatus === \"lose\" && <div className=\"lose-message\">Try again! You can do it!</div>}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PuzzleGame;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}