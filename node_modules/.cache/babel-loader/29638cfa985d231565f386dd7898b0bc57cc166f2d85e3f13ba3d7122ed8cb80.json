{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\shank\\\\surprise\\\\src\\\\Pages\\\\PuzzleGame.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './PuzzleGame.css';\n\n// Define 4 unique candy colors\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst candyColors = ['#ff6666', '#66ccff', '#99cc66', '#ffcc33'];\n\n// Function to generate a random candy color from the 4 available candies\nconst generateRandomCandy = () => {\n  return candyColors[Math.floor(Math.random() * candyColors.length)];\n};\nconst PuzzleGame = ({\n  level\n}) => {\n  _s();\n  const [gameBoard, setGameBoard] = useState([]);\n  const [isGameWon, setIsGameWon] = useState(false);\n  const [selectedCandy, setSelectedCandy] = useState(null);\n  const [showHowToPlay, setShowHowToPlay] = useState(false);\n\n  // Initialize the board with random candies (3x3 grid for 9 candies)\n  const initializeBoard = () => {\n    const rows = 3; // 3 rows\n    const cols = 3; // 3 columns\n    const board = [];\n    for (let row = 0; row < rows; row++) {\n      const rowArray = [];\n      for (let col = 0; col < cols; col++) {\n        rowArray.push(generateRandomCandy());\n      }\n      board.push(rowArray);\n    }\n    setGameBoard(board);\n  };\n\n  // Handle candy click (select or swap)\n  const handleCandyClick = (row, col) => {\n    if (!selectedCandy) {\n      // Select the candy for the first click\n      setSelectedCandy({\n        row,\n        col\n      });\n    } else {\n      const {\n        row: prevRow,\n        col: prevCol\n      } = selectedCandy;\n      if (Math.abs(prevRow - row) === 1 && prevCol === col ||\n      // Vertical swap\n      Math.abs(prevCol - col) === 1 && prevRow === row // Horizontal swap\n      ) {\n        // Swap candies if they are adjacent\n        let newBoard = [...gameBoard];\n        const temp = newBoard[prevRow][prevCol];\n        newBoard[prevRow][prevCol] = newBoard[row][col];\n        newBoard[row][col] = temp;\n        setGameBoard(newBoard);\n\n        // After swapping, check for matches and drop new candies\n        if (!checkMatches()) {\n          // If no match, swap back\n          newBoard = [...gameBoard];\n          newBoard[prevRow][prevCol] = newBoard[row][col];\n          newBoard[row][col] = temp;\n          setGameBoard(newBoard);\n        } else {\n          // After matching, drop new candies\n          dropCandies();\n        }\n      }\n      // Reset the selection after swap\n      setSelectedCandy(null);\n    }\n  };\n\n  // Check for horizontal matches of 3\n  const checkHorizontalMatches = () => {\n    let newBoard = [...gameBoard];\n    let matches = [];\n    for (let row = 0; row < 3; row++) {\n      for (let col = 0; col < 1; col++) {\n        // Only check up to col 1 for 3-item match\n        if (newBoard[row][col] === newBoard[row][col + 1] && newBoard[row][col] === newBoard[row][col + 2]) {\n          matches.push([row, col], [row, col + 1], [row, col + 2]);\n        }\n      }\n    }\n    return matches;\n  };\n\n  // Check for vertical matches of 3\n  const checkVerticalMatches = () => {\n    let newBoard = [...gameBoard];\n    let matches = [];\n    for (let col = 0; col < 3; col++) {\n      for (let row = 0; row < 1; row++) {\n        // Only check up to row 1 for 3-item match\n        if (newBoard[row][col] === newBoard[row + 1][col] && newBoard[row][col] === newBoard[row + 2][col]) {\n          matches.push([row, col], [row + 1, col], [row + 2, col]);\n        }\n      }\n    }\n    return matches;\n  };\n\n  // Check for matches (both horizontal and vertical)\n  const checkMatches = () => {\n    let newBoard = [...gameBoard];\n    const horizontalMatches = checkHorizontalMatches();\n    const verticalMatches = checkVerticalMatches();\n    const allMatches = [...horizontalMatches, ...verticalMatches];\n    if (allMatches.length > 0) {\n      // Mark matched candies as null (clearing them)\n      allMatches.forEach(([row, col]) => {\n        newBoard[row][col] = null;\n      });\n      setGameBoard(newBoard);\n      return true;\n    }\n    return false;\n  };\n\n  // After matching candies, drop new ones to fill empty spots\n  const dropCandies = () => {\n    let newBoard = [...gameBoard];\n    for (let col = 0; col < 3; col++) {\n      // Fill empty spots by shifting candies down\n      for (let row = 2; row >= 0; row--) {\n        if (newBoard[row][col] === null) {\n          for (let r = row - 1; r >= 0; r--) {\n            if (newBoard[r][col] !== null) {\n              newBoard[row][col] = newBoard[r][col];\n              newBoard[r][col] = null;\n              break;\n            }\n          }\n        }\n      }\n    }\n\n    // Fill the empty spots at the top with random candies\n    for (let row = 0; row < 3; row++) {\n      for (let col = 0; col < 3; col++) {\n        if (newBoard[row][col] === null) {\n          newBoard[row][col] = generateRandomCandy();\n        }\n      }\n    }\n    setGameBoard(newBoard);\n  };\n\n  // Initialize the board on first render\n  useEffect(() => {\n    initializeBoard();\n  }, [level]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Level \", level]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"how-to-play-btn\",\n      onClick: () => setShowHowToPlay(!showHowToPlay),\n      children: showHowToPlay ? 'Hide Instructions' : 'How to Play'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 7\n    }, this), showHowToPlay && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"how-to-play\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"How to Play\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Click on a candy to select it.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 176,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Click on an adjacent candy to swap their positions.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 177,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Try to match 3 or more candies of the same color, either horizontally or vertically.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 178,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"When you match candies, they will disappear, and new ones will fall into place.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"The goal is to clear all candies from the board by making matches!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-board\",\n      children: gameBoard.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-row\",\n        children: row.map((cell, colIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"game-cell\",\n          style: {\n            backgroundColor: cell\n          },\n          onClick: () => handleCandyClick(rowIndex, colIndex)\n        }, colIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 189,\n          columnNumber: 15\n        }, this))\n      }, rowIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 7\n    }, this), isGameWon && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"win-message\",\n      children: \"You Won this Level!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 21\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 163,\n    columnNumber: 5\n  }, this);\n};\n_s(PuzzleGame, \"2kjK7x1LpR3Kar1BR5uPhEWn1/c=\");\n_c = PuzzleGame;\nexport default PuzzleGame;\nvar _c;\n$RefreshReg$(_c, \"PuzzleGame\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","candyColors","generateRandomCandy","Math","floor","random","length","PuzzleGame","level","_s","gameBoard","setGameBoard","isGameWon","setIsGameWon","selectedCandy","setSelectedCandy","showHowToPlay","setShowHowToPlay","initializeBoard","rows","cols","board","row","rowArray","col","push","handleCandyClick","prevRow","prevCol","abs","newBoard","temp","checkMatches","dropCandies","checkHorizontalMatches","matches","checkVerticalMatches","horizontalMatches","verticalMatches","allMatches","forEach","r","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","map","rowIndex","cell","colIndex","style","backgroundColor","_c","$RefreshReg$"],"sources":["C:/Users/shank/surprise/src/Pages/PuzzleGame.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './PuzzleGame.css';\r\n\r\n// Define 4 unique candy colors\r\nconst candyColors = [\r\n  '#ff6666', '#66ccff', '#99cc66', '#ffcc33',\r\n];\r\n\r\n// Function to generate a random candy color from the 4 available candies\r\nconst generateRandomCandy = () => {\r\n  return candyColors[Math.floor(Math.random() * candyColors.length)];\r\n};\r\n\r\nconst PuzzleGame = ({ level }) => {\r\n  const [gameBoard, setGameBoard] = useState([]);\r\n  const [isGameWon, setIsGameWon] = useState(false);\r\n  const [selectedCandy, setSelectedCandy] = useState(null);\r\n  const [showHowToPlay, setShowHowToPlay] = useState(false);\r\n\r\n  // Initialize the board with random candies (3x3 grid for 9 candies)\r\n  const initializeBoard = () => {\r\n    const rows = 3;  // 3 rows\r\n    const cols = 3;  // 3 columns\r\n    const board = [];\r\n\r\n    for (let row = 0; row < rows; row++) {\r\n      const rowArray = [];\r\n      for (let col = 0; col < cols; col++) {\r\n        rowArray.push(generateRandomCandy());\r\n      }\r\n      board.push(rowArray);\r\n    }\r\n\r\n    setGameBoard(board);\r\n  };\r\n\r\n  // Handle candy click (select or swap)\r\n  const handleCandyClick = (row, col) => {\r\n    if (!selectedCandy) {\r\n      // Select the candy for the first click\r\n      setSelectedCandy({ row, col });\r\n    } else {\r\n      const { row: prevRow, col: prevCol } = selectedCandy;\r\n      if (\r\n        (Math.abs(prevRow - row) === 1 && prevCol === col) || // Vertical swap\r\n        (Math.abs(prevCol - col) === 1 && prevRow === row) // Horizontal swap\r\n      ) {\r\n        // Swap candies if they are adjacent\r\n        let newBoard = [...gameBoard];\r\n        const temp = newBoard[prevRow][prevCol];\r\n        newBoard[prevRow][prevCol] = newBoard[row][col];\r\n        newBoard[row][col] = temp;\r\n        setGameBoard(newBoard);\r\n\r\n        // After swapping, check for matches and drop new candies\r\n        if (!checkMatches()) {\r\n          // If no match, swap back\r\n          newBoard = [...gameBoard];\r\n          newBoard[prevRow][prevCol] = newBoard[row][col];\r\n          newBoard[row][col] = temp;\r\n          setGameBoard(newBoard);\r\n        } else {\r\n          // After matching, drop new candies\r\n          dropCandies();\r\n        }\r\n      }\r\n      // Reset the selection after swap\r\n      setSelectedCandy(null);\r\n    }\r\n  };\r\n\r\n  // Check for horizontal matches of 3\r\n  const checkHorizontalMatches = () => {\r\n    let newBoard = [...gameBoard];\r\n    let matches = [];\r\n\r\n    for (let row = 0; row < 3; row++) {\r\n      for (let col = 0; col < 1; col++) {  // Only check up to col 1 for 3-item match\r\n        if (\r\n          newBoard[row][col] === newBoard[row][col + 1] &&\r\n          newBoard[row][col] === newBoard[row][col + 2]\r\n        ) {\r\n          matches.push([row, col], [row, col + 1], [row, col + 2]);\r\n        }\r\n      }\r\n    }\r\n    return matches;\r\n  };\r\n\r\n  // Check for vertical matches of 3\r\n  const checkVerticalMatches = () => {\r\n    let newBoard = [...gameBoard];\r\n    let matches = [];\r\n\r\n    for (let col = 0; col < 3; col++) {\r\n      for (let row = 0; row < 1; row++) {  // Only check up to row 1 for 3-item match\r\n        if (\r\n          newBoard[row][col] === newBoard[row + 1][col] &&\r\n          newBoard[row][col] === newBoard[row + 2][col]\r\n        ) {\r\n          matches.push([row, col], [row + 1, col], [row + 2, col]);\r\n        }\r\n      }\r\n    }\r\n    return matches;\r\n  };\r\n\r\n  // Check for matches (both horizontal and vertical)\r\n  const checkMatches = () => {\r\n    let newBoard = [...gameBoard];\r\n    const horizontalMatches = checkHorizontalMatches();\r\n    const verticalMatches = checkVerticalMatches();\r\n\r\n    const allMatches = [...horizontalMatches, ...verticalMatches];\r\n\r\n    if (allMatches.length > 0) {\r\n      // Mark matched candies as null (clearing them)\r\n      allMatches.forEach(([row, col]) => {\r\n        newBoard[row][col] = null;\r\n      });\r\n      setGameBoard(newBoard);\r\n      return true;\r\n    }\r\n    return false;\r\n  };\r\n\r\n  // After matching candies, drop new ones to fill empty spots\r\n  const dropCandies = () => {\r\n    let newBoard = [...gameBoard];\r\n    for (let col = 0; col < 3; col++) {\r\n      // Fill empty spots by shifting candies down\r\n      for (let row = 2; row >= 0; row--) {\r\n        if (newBoard[row][col] === null) {\r\n          for (let r = row - 1; r >= 0; r--) {\r\n            if (newBoard[r][col] !== null) {\r\n              newBoard[row][col] = newBoard[r][col];\r\n              newBoard[r][col] = null;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // Fill the empty spots at the top with random candies\r\n    for (let row = 0; row < 3; row++) {\r\n      for (let col = 0; col < 3; col++) {\r\n        if (newBoard[row][col] === null) {\r\n          newBoard[row][col] = generateRandomCandy();\r\n        }\r\n      }\r\n    }\r\n\r\n    setGameBoard(newBoard);\r\n  };\r\n\r\n  // Initialize the board on first render\r\n  useEffect(() => {\r\n    initializeBoard();\r\n  }, [level]);\r\n\r\n  return (\r\n    <div className=\"game-container\">\r\n      <h1>Level {level}</h1>\r\n\r\n      {/* How-to-play toggle button */}\r\n      <button className=\"how-to-play-btn\" onClick={() => setShowHowToPlay(!showHowToPlay)}>\r\n        {showHowToPlay ? 'Hide Instructions' : 'How to Play'}\r\n      </button>\r\n\r\n      {/* How-to-play instructions */}\r\n      {showHowToPlay && (\r\n        <div className=\"how-to-play\">\r\n          <h2>How to Play</h2>\r\n          <ul>\r\n            <li>Click on a candy to select it.</li>\r\n            <li>Click on an adjacent candy to swap their positions.</li>\r\n            <li>Try to match 3 or more candies of the same color, either horizontally or vertically.</li>\r\n            <li>When you match candies, they will disappear, and new ones will fall into place.</li>\r\n            <li>The goal is to clear all candies from the board by making matches!</li>\r\n          </ul>\r\n        </div>\r\n      )}\r\n\r\n      <div className=\"game-board\">\r\n        {gameBoard.map((row, rowIndex) => (\r\n          <div key={rowIndex} className=\"game-row\">\r\n            {row.map((cell, colIndex) => (\r\n              <div\r\n                key={colIndex}\r\n                className=\"game-cell\"\r\n                style={{ backgroundColor: cell }}\r\n                onClick={() => handleCandyClick(rowIndex, colIndex)}\r\n              />\r\n            ))}\r\n          </div>\r\n        ))}\r\n      </div>\r\n\r\n      {isGameWon && <div className=\"win-message\">You Won this Level!</div>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PuzzleGame;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAO,kBAAkB;;AAEzB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,WAAW,GAAG,CAClB,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,CAC3C;;AAED;AACA,MAAMC,mBAAmB,GAAGA,CAAA,KAAM;EAChC,OAAOD,WAAW,CAACE,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGJ,WAAW,CAACK,MAAM,CAAC,CAAC;AACpE,CAAC;AAED,MAAMC,UAAU,GAAGA,CAAC;EAAEC;AAAM,CAAC,KAAK;EAAAC,EAAA;EAChC,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACe,SAAS,EAAEC,YAAY,CAAC,GAAGhB,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACiB,aAAa,EAAEC,gBAAgB,CAAC,GAAGlB,QAAQ,CAAC,IAAI,CAAC;EACxD,MAAM,CAACmB,aAAa,EAAEC,gBAAgB,CAAC,GAAGpB,QAAQ,CAAC,KAAK,CAAC;;EAEzD;EACA,MAAMqB,eAAe,GAAGA,CAAA,KAAM;IAC5B,MAAMC,IAAI,GAAG,CAAC,CAAC,CAAE;IACjB,MAAMC,IAAI,GAAG,CAAC,CAAC,CAAE;IACjB,MAAMC,KAAK,GAAG,EAAE;IAEhB,KAAK,IAAIC,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAGH,IAAI,EAAEG,GAAG,EAAE,EAAE;MACnC,MAAMC,QAAQ,GAAG,EAAE;MACnB,KAAK,IAAIC,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAGJ,IAAI,EAAEI,GAAG,EAAE,EAAE;QACnCD,QAAQ,CAACE,IAAI,CAACvB,mBAAmB,CAAC,CAAC,CAAC;MACtC;MACAmB,KAAK,CAACI,IAAI,CAACF,QAAQ,CAAC;IACtB;IAEAZ,YAAY,CAACU,KAAK,CAAC;EACrB,CAAC;;EAED;EACA,MAAMK,gBAAgB,GAAGA,CAACJ,GAAG,EAAEE,GAAG,KAAK;IACrC,IAAI,CAACV,aAAa,EAAE;MAClB;MACAC,gBAAgB,CAAC;QAAEO,GAAG;QAAEE;MAAI,CAAC,CAAC;IAChC,CAAC,MAAM;MACL,MAAM;QAAEF,GAAG,EAAEK,OAAO;QAAEH,GAAG,EAAEI;MAAQ,CAAC,GAAGd,aAAa;MACpD,IACGX,IAAI,CAAC0B,GAAG,CAACF,OAAO,GAAGL,GAAG,CAAC,KAAK,CAAC,IAAIM,OAAO,KAAKJ,GAAG;MAAK;MACrDrB,IAAI,CAAC0B,GAAG,CAACD,OAAO,GAAGJ,GAAG,CAAC,KAAK,CAAC,IAAIG,OAAO,KAAKL,GAAI,CAAC;MAAA,EACnD;QACA;QACA,IAAIQ,QAAQ,GAAG,CAAC,GAAGpB,SAAS,CAAC;QAC7B,MAAMqB,IAAI,GAAGD,QAAQ,CAACH,OAAO,CAAC,CAACC,OAAO,CAAC;QACvCE,QAAQ,CAACH,OAAO,CAAC,CAACC,OAAO,CAAC,GAAGE,QAAQ,CAACR,GAAG,CAAC,CAACE,GAAG,CAAC;QAC/CM,QAAQ,CAACR,GAAG,CAAC,CAACE,GAAG,CAAC,GAAGO,IAAI;QACzBpB,YAAY,CAACmB,QAAQ,CAAC;;QAEtB;QACA,IAAI,CAACE,YAAY,CAAC,CAAC,EAAE;UACnB;UACAF,QAAQ,GAAG,CAAC,GAAGpB,SAAS,CAAC;UACzBoB,QAAQ,CAACH,OAAO,CAAC,CAACC,OAAO,CAAC,GAAGE,QAAQ,CAACR,GAAG,CAAC,CAACE,GAAG,CAAC;UAC/CM,QAAQ,CAACR,GAAG,CAAC,CAACE,GAAG,CAAC,GAAGO,IAAI;UACzBpB,YAAY,CAACmB,QAAQ,CAAC;QACxB,CAAC,MAAM;UACL;UACAG,WAAW,CAAC,CAAC;QACf;MACF;MACA;MACAlB,gBAAgB,CAAC,IAAI,CAAC;IACxB;EACF,CAAC;;EAED;EACA,MAAMmB,sBAAsB,GAAGA,CAAA,KAAM;IACnC,IAAIJ,QAAQ,GAAG,CAAC,GAAGpB,SAAS,CAAC;IAC7B,IAAIyB,OAAO,GAAG,EAAE;IAEhB,KAAK,IAAIb,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAG,CAAC,EAAEA,GAAG,EAAE,EAAE;MAChC,KAAK,IAAIE,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAG,CAAC,EAAEA,GAAG,EAAE,EAAE;QAAG;QACnC,IACEM,QAAQ,CAACR,GAAG,CAAC,CAACE,GAAG,CAAC,KAAKM,QAAQ,CAACR,GAAG,CAAC,CAACE,GAAG,GAAG,CAAC,CAAC,IAC7CM,QAAQ,CAACR,GAAG,CAAC,CAACE,GAAG,CAAC,KAAKM,QAAQ,CAACR,GAAG,CAAC,CAACE,GAAG,GAAG,CAAC,CAAC,EAC7C;UACAW,OAAO,CAACV,IAAI,CAAC,CAACH,GAAG,EAAEE,GAAG,CAAC,EAAE,CAACF,GAAG,EAAEE,GAAG,GAAG,CAAC,CAAC,EAAE,CAACF,GAAG,EAAEE,GAAG,GAAG,CAAC,CAAC,CAAC;QAC1D;MACF;IACF;IACA,OAAOW,OAAO;EAChB,CAAC;;EAED;EACA,MAAMC,oBAAoB,GAAGA,CAAA,KAAM;IACjC,IAAIN,QAAQ,GAAG,CAAC,GAAGpB,SAAS,CAAC;IAC7B,IAAIyB,OAAO,GAAG,EAAE;IAEhB,KAAK,IAAIX,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAG,CAAC,EAAEA,GAAG,EAAE,EAAE;MAChC,KAAK,IAAIF,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAG,CAAC,EAAEA,GAAG,EAAE,EAAE;QAAG;QACnC,IACEQ,QAAQ,CAACR,GAAG,CAAC,CAACE,GAAG,CAAC,KAAKM,QAAQ,CAACR,GAAG,GAAG,CAAC,CAAC,CAACE,GAAG,CAAC,IAC7CM,QAAQ,CAACR,GAAG,CAAC,CAACE,GAAG,CAAC,KAAKM,QAAQ,CAACR,GAAG,GAAG,CAAC,CAAC,CAACE,GAAG,CAAC,EAC7C;UACAW,OAAO,CAACV,IAAI,CAAC,CAACH,GAAG,EAAEE,GAAG,CAAC,EAAE,CAACF,GAAG,GAAG,CAAC,EAAEE,GAAG,CAAC,EAAE,CAACF,GAAG,GAAG,CAAC,EAAEE,GAAG,CAAC,CAAC;QAC1D;MACF;IACF;IACA,OAAOW,OAAO;EAChB,CAAC;;EAED;EACA,MAAMH,YAAY,GAAGA,CAAA,KAAM;IACzB,IAAIF,QAAQ,GAAG,CAAC,GAAGpB,SAAS,CAAC;IAC7B,MAAM2B,iBAAiB,GAAGH,sBAAsB,CAAC,CAAC;IAClD,MAAMI,eAAe,GAAGF,oBAAoB,CAAC,CAAC;IAE9C,MAAMG,UAAU,GAAG,CAAC,GAAGF,iBAAiB,EAAE,GAAGC,eAAe,CAAC;IAE7D,IAAIC,UAAU,CAACjC,MAAM,GAAG,CAAC,EAAE;MACzB;MACAiC,UAAU,CAACC,OAAO,CAAC,CAAC,CAAClB,GAAG,EAAEE,GAAG,CAAC,KAAK;QACjCM,QAAQ,CAACR,GAAG,CAAC,CAACE,GAAG,CAAC,GAAG,IAAI;MAC3B,CAAC,CAAC;MACFb,YAAY,CAACmB,QAAQ,CAAC;MACtB,OAAO,IAAI;IACb;IACA,OAAO,KAAK;EACd,CAAC;;EAED;EACA,MAAMG,WAAW,GAAGA,CAAA,KAAM;IACxB,IAAIH,QAAQ,GAAG,CAAC,GAAGpB,SAAS,CAAC;IAC7B,KAAK,IAAIc,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAG,CAAC,EAAEA,GAAG,EAAE,EAAE;MAChC;MACA,KAAK,IAAIF,GAAG,GAAG,CAAC,EAAEA,GAAG,IAAI,CAAC,EAAEA,GAAG,EAAE,EAAE;QACjC,IAAIQ,QAAQ,CAACR,GAAG,CAAC,CAACE,GAAG,CAAC,KAAK,IAAI,EAAE;UAC/B,KAAK,IAAIiB,CAAC,GAAGnB,GAAG,GAAG,CAAC,EAAEmB,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;YACjC,IAAIX,QAAQ,CAACW,CAAC,CAAC,CAACjB,GAAG,CAAC,KAAK,IAAI,EAAE;cAC7BM,QAAQ,CAACR,GAAG,CAAC,CAACE,GAAG,CAAC,GAAGM,QAAQ,CAACW,CAAC,CAAC,CAACjB,GAAG,CAAC;cACrCM,QAAQ,CAACW,CAAC,CAAC,CAACjB,GAAG,CAAC,GAAG,IAAI;cACvB;YACF;UACF;QACF;MACF;IACF;;IAEA;IACA,KAAK,IAAIF,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAG,CAAC,EAAEA,GAAG,EAAE,EAAE;MAChC,KAAK,IAAIE,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAG,CAAC,EAAEA,GAAG,EAAE,EAAE;QAChC,IAAIM,QAAQ,CAACR,GAAG,CAAC,CAACE,GAAG,CAAC,KAAK,IAAI,EAAE;UAC/BM,QAAQ,CAACR,GAAG,CAAC,CAACE,GAAG,CAAC,GAAGtB,mBAAmB,CAAC,CAAC;QAC5C;MACF;IACF;IAEAS,YAAY,CAACmB,QAAQ,CAAC;EACxB,CAAC;;EAED;EACAhC,SAAS,CAAC,MAAM;IACdoB,eAAe,CAAC,CAAC;EACnB,CAAC,EAAE,CAACV,KAAK,CAAC,CAAC;EAEX,oBACER,OAAA;IAAK0C,SAAS,EAAC,gBAAgB;IAAAC,QAAA,gBAC7B3C,OAAA;MAAA2C,QAAA,GAAI,QAAM,EAACnC,KAAK;IAAA;MAAAoC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eAGtB/C,OAAA;MAAQ0C,SAAS,EAAC,iBAAiB;MAACM,OAAO,EAAEA,CAAA,KAAM/B,gBAAgB,CAAC,CAACD,aAAa,CAAE;MAAA2B,QAAA,EACjF3B,aAAa,GAAG,mBAAmB,GAAG;IAAa;MAAA4B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC9C,CAAC,EAGR/B,aAAa,iBACZhB,OAAA;MAAK0C,SAAS,EAAC,aAAa;MAAAC,QAAA,gBAC1B3C,OAAA;QAAA2C,QAAA,EAAI;MAAW;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACpB/C,OAAA;QAAA2C,QAAA,gBACE3C,OAAA;UAAA2C,QAAA,EAAI;QAA8B;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACvC/C,OAAA;UAAA2C,QAAA,EAAI;QAAmD;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAC5D/C,OAAA;UAAA2C,QAAA,EAAI;QAAoF;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAC7F/C,OAAA;UAAA2C,QAAA,EAAI;QAA+E;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACxF/C,OAAA;UAAA2C,QAAA,EAAI;QAAkE;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACzE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF,CACN,eAED/C,OAAA;MAAK0C,SAAS,EAAC,YAAY;MAAAC,QAAA,EACxBjC,SAAS,CAACuC,GAAG,CAAC,CAAC3B,GAAG,EAAE4B,QAAQ,kBAC3BlD,OAAA;QAAoB0C,SAAS,EAAC,UAAU;QAAAC,QAAA,EACrCrB,GAAG,CAAC2B,GAAG,CAAC,CAACE,IAAI,EAAEC,QAAQ,kBACtBpD,OAAA;UAEE0C,SAAS,EAAC,WAAW;UACrBW,KAAK,EAAE;YAAEC,eAAe,EAAEH;UAAK,CAAE;UACjCH,OAAO,EAAEA,CAAA,KAAMtB,gBAAgB,CAACwB,QAAQ,EAAEE,QAAQ;QAAE,GAH/CA,QAAQ;UAAAR,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAId,CACF;MAAC,GARMG,QAAQ;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OASb,CACN;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC,EAELnC,SAAS,iBAAIZ,OAAA;MAAK0C,SAAS,EAAC,aAAa;MAAAC,QAAA,EAAC;IAAmB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACjE,CAAC;AAEV,CAAC;AAACtC,EAAA,CA7LIF,UAAU;AAAAgD,EAAA,GAAVhD,UAAU;AA+LhB,eAAeA,UAAU;AAAC,IAAAgD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}