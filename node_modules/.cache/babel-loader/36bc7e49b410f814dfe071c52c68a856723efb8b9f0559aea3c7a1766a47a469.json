{"ast":null,"code":"import React,{useState,useEffect}from'react';import{useNavigate}from'react-router-dom';import'./Page3.css';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const MemoryMatch=()=>{// Define 8 different smiley emojis for the cards\nconst smileys=['üíã','üåπ','üåª','‚òòÔ∏è','üòç','‚ù§Ô∏è','üíò','üíê'];// Create 16 cards (8 pairs) by duplicating the smileys\nconst[cards,setCards]=useState([...smileys,...smileys]// Create pairs\n.map((content,index)=>({id:index,content,isFlipped:false})).sort(()=>Math.random()-0.5)// Shuffle cards randomly\n);const[flippedCards,setFlippedCards]=useState([]);// To keep track of flipped cards\nconst[matchedCards,setMatchedCards]=useState([]);// To store matched cards\nconst navigate=useNavigate();// Navigate hook to handle game completion\nconst[isMusicPlaying,setIsMusicPlaying]=useState(false);const flipCard=id=>{// Do nothing if card is already flipped or it's matched\nif(flippedCards.length===2||matchedCards.includes(id)||cards.find(card=>card.id===id).isFlipped)return;const newCards=[...cards];const cardIndex=newCards.findIndex(card=>card.id===id);newCards[cardIndex].isFlipped=true;setCards(newCards);// Add flipped card to the list\nsetFlippedCards(prev=>[...prev,id]);if(flippedCards.length===1){// Compare the last two flipped cards\nconst firstCard=cards.find(card=>card.id===flippedCards[0]);const secondCard=cards.find(card=>card.id===id);if(firstCard.content===secondCard.content){// Cards match, mark them as matched\nsetMatchedCards(prev=>[...prev,firstCard.id,secondCard.id]);}else{// If no match, flip them back after a delay\nsetTimeout(()=>{const resetCards=[...cards];resetCards[cardIndex].isFlipped=false;resetCards[cards.findIndex(card=>card.id===flippedCards[0])].isFlipped=false;setCards(resetCards);},1000);}// Reset flipped cards\nsetFlippedCards([]);}};// Check if the game is won\nif(matchedCards.length===cards.length){// Redirect to next page when all pairs are matched\nsetTimeout(()=>navigate('/game'),1000);}// Start the music on user interaction\nuseEffect(()=>{const handleUserInteraction=()=>{const audioElement=document.getElementById('summer');if(audioElement){audioElement.play();setIsMusicPlaying(true);window.removeEventListener('click',handleUserInteraction);// Remove the listener after it triggers once\n}};window.addEventListener('click',handleUserInteraction);return()=>{window.removeEventListener('click',handleUserInteraction);// Cleanup event listener when the component unmounts\n};},[]);return/*#__PURE__*/_jsxs(\"div\",{className:\"game-container\",children:[/*#__PURE__*/_jsxs(\"audio\",{id:\"summer\",loop:true,children:[/*#__PURE__*/_jsx(\"source\",{src:\"/assets/Summer breeze.mp3\",type:\"audio/mp3\"}),\"Your browser does not support the audio element.\"]}),/*#__PURE__*/_jsx(\"h3\",{children:\"To prove that her heart has matched and she has fallen for him You need to help her to match the smileys!!\"}),/*#__PURE__*/_jsx(\"div\",{className:\"card-grid\",children:cards.map(card=>/*#__PURE__*/_jsx(\"div\",{className:\"card\",onClick:()=>flipCard(card.id),children:card.isFlipped||matchedCards.includes(card.id)?card.content// Display the smiley when flipped or matched\n:'‚ùì'// Display a question mark when the card is not flipped\n},card.id))})]});};export default MemoryMatch;","map":{"version":3,"names":["React","useState","useEffect","useNavigate","jsx","_jsx","jsxs","_jsxs","MemoryMatch","smileys","cards","setCards","map","content","index","id","isFlipped","sort","Math","random","flippedCards","setFlippedCards","matchedCards","setMatchedCards","navigate","isMusicPlaying","setIsMusicPlaying","flipCard","length","includes","find","card","newCards","cardIndex","findIndex","prev","firstCard","secondCard","setTimeout","resetCards","handleUserInteraction","audioElement","document","getElementById","play","window","removeEventListener","addEventListener","className","children","loop","src","type","onClick"],"sources":["C:/Users/shank/Documents/GitHub/loveProject/src/Pages/Page3.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport './Page3.css';\r\n\r\nconst MemoryMatch = () => {\r\n  // Define 8 different smiley emojis for the cards\r\n  const smileys = [\r\n    'üíã','üåπ','üåª','‚òòÔ∏è', 'üòç', '‚ù§Ô∏è','üíò','üíê'\r\n  ];\r\n\r\n  // Create 16 cards (8 pairs) by duplicating the smileys\r\n  const [cards, setCards] = useState(\r\n    [...smileys, ...smileys] // Create pairs\r\n      .map((content, index) => ({ id: index, content, isFlipped: false }))\r\n      .sort(() => Math.random() - 0.5) // Shuffle cards randomly\r\n  );\r\n\r\n  const [flippedCards, setFlippedCards] = useState([]); // To keep track of flipped cards\r\n  const [matchedCards, setMatchedCards] = useState([]); // To store matched cards\r\n  const navigate = useNavigate(); // Navigate hook to handle game completion\r\n  const [isMusicPlaying, setIsMusicPlaying] = useState(false);\r\n\r\n  const flipCard = (id) => {\r\n    // Do nothing if card is already flipped or it's matched\r\n    if (flippedCards.length === 2 || matchedCards.includes(id) || cards.find(card => card.id === id).isFlipped) return;\r\n\r\n    const newCards = [...cards];\r\n    const cardIndex = newCards.findIndex(card => card.id === id);\r\n    newCards[cardIndex].isFlipped = true;\r\n    setCards(newCards);\r\n\r\n    // Add flipped card to the list\r\n    setFlippedCards(prev => [...prev, id]);\r\n\r\n    if (flippedCards.length === 1) {\r\n      // Compare the last two flipped cards\r\n      const firstCard = cards.find(card => card.id === flippedCards[0]);\r\n      const secondCard = cards.find(card => card.id === id);\r\n\r\n      if (firstCard.content === secondCard.content) {\r\n        // Cards match, mark them as matched\r\n        setMatchedCards(prev => [...prev, firstCard.id, secondCard.id]);\r\n      } else {\r\n        // If no match, flip them back after a delay\r\n        setTimeout(() => {\r\n          const resetCards = [...cards];\r\n          resetCards[cardIndex].isFlipped = false;\r\n          resetCards[cards.findIndex(card => card.id === flippedCards[0])].isFlipped = false;\r\n          setCards(resetCards);\r\n        }, 1000);\r\n      }\r\n\r\n      // Reset flipped cards\r\n      setFlippedCards([]);\r\n    }\r\n  };\r\n\r\n  // Check if the game is won\r\n  if (matchedCards.length === cards.length) {\r\n    // Redirect to next page when all pairs are matched\r\n    setTimeout(() => navigate('/game'), 1000);\r\n  }\r\n  // Start the music on user interaction\r\n    useEffect(() => {\r\n      const handleUserInteraction = () => {\r\n        const audioElement = document.getElementById('summer');\r\n        if (audioElement) {\r\n          audioElement.play();\r\n          setIsMusicPlaying(true);\r\n          window.removeEventListener('click', handleUserInteraction); // Remove the listener after it triggers once\r\n        }\r\n      };\r\n  \r\n      window.addEventListener('click', handleUserInteraction);\r\n  \r\n      return () => {\r\n        window.removeEventListener('click', handleUserInteraction); // Cleanup event listener when the component unmounts\r\n      };\r\n    }, []);\r\n\r\n  return (\r\n    \r\n    <div className=\"game-container\">\r\n      {/* Background music element */} \r\n      <audio id=\"summer\" loop>\r\n        <source src=\"/assets/Summer breeze.mp3\" type=\"audio/mp3\" />\r\n        Your browser does not support the audio element.\r\n      </audio>\r\n      <h3>To prove that her heart has matched and she has fallen for him You need to help her to match the smileys!!</h3>\r\n      <div className=\"card-grid\">\r\n        {cards.map(card => (\r\n          <div\r\n            className=\"card\"\r\n            key={card.id}\r\n            onClick={() => flipCard(card.id)}\r\n          >\r\n            {card.isFlipped || matchedCards.includes(card.id) ? (\r\n              card.content // Display the smiley when flipped or matched\r\n            ) : (\r\n              '‚ùì' // Display a question mark when the card is not flipped\r\n            )}\r\n          </div>\r\n        ))}\r\n      </div>\r\n\r\n     \r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MemoryMatch;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}