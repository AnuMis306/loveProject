{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\shank\\\\surprise\\\\src\\\\Pages\\\\PuzzleGame.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport 'PuzzleGame.css';\n\n// Define the colors of candies\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst colors = ['#ff6347', '#ffcc00', '#32cd32', '#1e90ff', '#ff1493', '#ffa500'];\nconst rows = 8;\nconst columns = 8;\nfunction App() {\n  _s();\n  const [board, setBoard] = useState(createBoard());\n\n  // Create a random board with candies\n  function createBoard() {\n    const newBoard = [];\n    for (let row = 0; row < rows; row++) {\n      newBoard[row] = [];\n      for (let col = 0; col < columns; col++) {\n        newBoard[row][col] = colors[Math.floor(Math.random() * colors.length)];\n      }\n    }\n    return newBoard;\n  }\n\n  // Detect matches on the board\n  const detectMatches = board => {\n    let matches = [];\n\n    // Check rows\n    for (let row = 0; row < rows; row++) {\n      for (let col = 0; col < columns - 2; col++) {\n        if (board[row][col] === board[row][col + 1] && board[row][col] === board[row][col + 2]) {\n          matches.push([[row, col], [row, col + 1], [row, col + 2]]);\n        }\n      }\n    }\n\n    // Check columns\n    for (let col = 0; col < columns; col++) {\n      for (let row = 0; row < rows - 2; row++) {\n        if (board[row][col] === board[row + 1][col] && board[row][col] === board[row + 2][col]) {\n          matches.push([[row, col], [row + 1, col], [row + 2, col]]);\n        }\n      }\n    }\n    return matches;\n  };\n\n  // Remove the matched candies\n  const removeMatches = (board, matches) => {\n    matches.forEach(match => {\n      match.forEach(([row, col]) => {\n        board[row][col] = null;\n      });\n    });\n  };\n\n  // Drop candies down to fill empty spaces\n  const dropCandies = board => {\n    for (let col = 0; col < columns; col++) {\n      let emptyRows = [];\n      for (let row = rows - 1; row >= 0; row--) {\n        if (board[row][col] === null) {\n          emptyRows.push(row);\n        } else if (emptyRows.length > 0) {\n          const newRow = emptyRows.pop();\n          board[newRow][col] = board[row][col];\n          board[row][col] = null;\n        }\n      }\n\n      // Fill empty spaces at the top with new random candies\n      emptyRows.forEach(emptyRow => {\n        board[emptyRow][col] = colors[Math.floor(Math.random() * colors.length)];\n      });\n    }\n  };\n  const handleClick = (row, col) => {\n    // Select candy, for simplicity, we just swap candies for now\n    // You can extend this for more complex game logic (like drag & drop)\n  };\n  const handleGameLoop = () => {\n    let newBoard = [...board];\n    let matches = detectMatches(newBoard);\n\n    // If there are matches, remove them and make candies fall\n    while (matches.length > 0) {\n      removeMatches(newBoard, matches);\n      dropCandies(newBoard);\n      matches = detectMatches(newBoard);\n    }\n    setBoard(newBoard);\n  };\n  useEffect(() => {\n    // Start the game loop (detecting matches every second for simplicity)\n    const interval = setInterval(() => {\n      handleGameLoop();\n    }, 1000);\n    return () => clearInterval(interval); // Clean up the interval on component unmount\n  }, [board]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-board\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Candy Crush Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board\",\n      children: board.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"row\",\n        children: row.map((candy, colIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"candy\",\n          style: {\n            backgroundColor: candy\n          },\n          onClick: () => handleClick(rowIndex, colIndex)\n        }, colIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 15\n        }, this))\n      }, rowIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"P3NWdjLnkMfVVyL6RZ3VodtOEqs=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","colors","rows","columns","App","_s","board","setBoard","createBoard","newBoard","row","col","Math","floor","random","length","detectMatches","matches","push","removeMatches","forEach","match","dropCandies","emptyRows","newRow","pop","emptyRow","handleClick","handleGameLoop","interval","setInterval","clearInterval","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","rowIndex","candy","colIndex","style","backgroundColor","onClick","_c","$RefreshReg$"],"sources":["C:/Users/shank/surprise/src/Pages/PuzzleGame.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport 'PuzzleGame.css';\r\n\r\n// Define the colors of candies\r\nconst colors = ['#ff6347', '#ffcc00', '#32cd32', '#1e90ff', '#ff1493', '#ffa500'];\r\n\r\nconst rows = 8;\r\nconst columns = 8;\r\n\r\nfunction App() {\r\n  const [board, setBoard] = useState(createBoard());\r\n\r\n  // Create a random board with candies\r\n  function createBoard() {\r\n    const newBoard = [];\r\n    for (let row = 0; row < rows; row++) {\r\n      newBoard[row] = [];\r\n      for (let col = 0; col < columns; col++) {\r\n        newBoard[row][col] = colors[Math.floor(Math.random() * colors.length)];\r\n      }\r\n    }\r\n    return newBoard;\r\n  }\r\n\r\n  // Detect matches on the board\r\n  const detectMatches = (board) => {\r\n    let matches = [];\r\n    \r\n    // Check rows\r\n    for (let row = 0; row < rows; row++) {\r\n      for (let col = 0; col < columns - 2; col++) {\r\n        if (board[row][col] === board[row][col + 1] && board[row][col] === board[row][col + 2]) {\r\n          matches.push([[row, col], [row, col + 1], [row, col + 2]]);\r\n        }\r\n      }\r\n    }\r\n\r\n    // Check columns\r\n    for (let col = 0; col < columns; col++) {\r\n      for (let row = 0; row < rows - 2; row++) {\r\n        if (board[row][col] === board[row + 1][col] && board[row][col] === board[row + 2][col]) {\r\n          matches.push([[row, col], [row + 1, col], [row + 2, col]]);\r\n        }\r\n      }\r\n    }\r\n\r\n    return matches;\r\n  };\r\n\r\n  // Remove the matched candies\r\n  const removeMatches = (board, matches) => {\r\n    matches.forEach(match => {\r\n      match.forEach(([row, col]) => {\r\n        board[row][col] = null;\r\n      });\r\n    });\r\n  };\r\n\r\n  // Drop candies down to fill empty spaces\r\n  const dropCandies = (board) => {\r\n    for (let col = 0; col < columns; col++) {\r\n      let emptyRows = [];\r\n      for (let row = rows - 1; row >= 0; row--) {\r\n        if (board[row][col] === null) {\r\n          emptyRows.push(row);\r\n        } else if (emptyRows.length > 0) {\r\n          const newRow = emptyRows.pop();\r\n          board[newRow][col] = board[row][col];\r\n          board[row][col] = null;\r\n        }\r\n      }\r\n\r\n      // Fill empty spaces at the top with new random candies\r\n      emptyRows.forEach((emptyRow) => {\r\n        board[emptyRow][col] = colors[Math.floor(Math.random() * colors.length)];\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleClick = (row, col) => {\r\n    // Select candy, for simplicity, we just swap candies for now\r\n    // You can extend this for more complex game logic (like drag & drop)\r\n  };\r\n\r\n  const handleGameLoop = () => {\r\n    let newBoard = [...board];\r\n    let matches = detectMatches(newBoard);\r\n\r\n    // If there are matches, remove them and make candies fall\r\n    while (matches.length > 0) {\r\n      removeMatches(newBoard, matches);\r\n      dropCandies(newBoard);\r\n      matches = detectMatches(newBoard);\r\n    }\r\n\r\n    setBoard(newBoard);\r\n  };\r\n\r\n  useEffect(() => {\r\n    // Start the game loop (detecting matches every second for simplicity)\r\n    const interval = setInterval(() => {\r\n      handleGameLoop();\r\n    }, 1000);\r\n\r\n    return () => clearInterval(interval); // Clean up the interval on component unmount\r\n  }, [board]);\r\n\r\n  return (\r\n    <div className=\"game-board\">\r\n      <h2>Candy Crush Game</h2>\r\n      <div className=\"board\">\r\n        {board.map((row, rowIndex) => (\r\n          <div className=\"row\" key={rowIndex}>\r\n            {row.map((candy, colIndex) => (\r\n              <div\r\n                className=\"candy\"\r\n                key={colIndex}\r\n                style={{ backgroundColor: candy }}\r\n                onClick={() => handleClick(rowIndex, colIndex)}\r\n              />\r\n            ))}\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}