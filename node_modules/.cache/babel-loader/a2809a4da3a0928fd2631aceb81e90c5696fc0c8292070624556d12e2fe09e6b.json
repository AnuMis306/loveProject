{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\shank\\\\surprise\\\\src\\\\Pages\\\\Page3.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport './Page3.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MemoryMatch = () => {\n  _s();\n  const [cards, setCards] = useState([...Array(16).keys()].map(i => ({\n    id: i,\n    isFlipped: false,\n    content: i % 2 === 0 ? '/assets/Photo1.jpeg' // Use the image path for the heart image\n    : '/assets/Photo2.jpeg' // Use the image path for the diamond image\n  })));\n  const [flippedCards, setFlippedCards] = useState([]); // To keep track of flipped cards\n  const [matchedCards, setMatchedCards] = useState([]); // To store matched cards\n  const navigate = useNavigate(); // Navigate hook to handle game completion\n\n  const flipCard = id => {\n    // Do nothing if card is already flipped or it's matched\n    if (flippedCards.length === 2 || matchedCards.includes(id) || cards.find(card => card.id === id).isFlipped) return;\n    const newCards = [...cards];\n    const cardIndex = newCards.findIndex(card => card.id === id);\n    newCards[cardIndex].isFlipped = true;\n    setCards(newCards);\n\n    // Add flipped card to the list\n    setFlippedCards(prev => [...prev, id]);\n    if (flippedCards.length === 1) {\n      // Compare the last two flipped cards\n      const firstCard = cards.find(card => card.id === flippedCards[0]);\n      const secondCard = cards.find(card => card.id === id);\n      if (firstCard.content === secondCard.content) {\n        // Cards match, mark them as matched\n        setMatchedCards(prev => [...prev, firstCard.id, secondCard.id]);\n      } else {\n        // If no match, flip them back after a delay\n        setTimeout(() => {\n          const resetCards = [...cards];\n          resetCards[cardIndex].isFlipped = false;\n          resetCards[cards.findIndex(card => card.id === flippedCards[0])].isFlipped = false;\n          setCards(resetCards);\n        }, 1000);\n      }\n\n      // Reset flipped cards\n      setFlippedCards([]);\n    }\n  };\n\n  // Check if the game is won\n  if (matchedCards.length === cards.length) {\n    // Redirect to next page when all pairs are matched\n    setTimeout(() => navigate('/game'), 1000);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Match the images!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-grid\",\n      children: cards.map(card => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card\",\n        onClick: () => flipCard(card.id),\n        children: card.isFlipped || matchedCards.includes(card.id) ? /*#__PURE__*/_jsxDEV(\"img\", {\n          src: process.env.PUBLIC_URL + card.content,\n          alt: \"card content\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 15\n        }, this) : '❓'\n      }, card.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n};\n_s(MemoryMatch, \"ZrcaUvsRYLXLNQUFOCtC/W83rxQ=\", false, function () {\n  return [useNavigate];\n});\n_c = MemoryMatch;\nexport default MemoryMatch;\nvar _c;\n$RefreshReg$(_c, \"MemoryMatch\");","map":{"version":3,"names":["React","useState","useNavigate","jsxDEV","_jsxDEV","MemoryMatch","_s","cards","setCards","Array","keys","map","i","id","isFlipped","content","flippedCards","setFlippedCards","matchedCards","setMatchedCards","navigate","flipCard","length","includes","find","card","newCards","cardIndex","findIndex","prev","firstCard","secondCard","setTimeout","resetCards","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","src","process","env","PUBLIC_URL","alt","_c","$RefreshReg$"],"sources":["C:/Users/shank/surprise/src/Pages/Page3.js"],"sourcesContent":["import React, { useState } from 'react'; \r\nimport { useNavigate } from 'react-router-dom';\r\nimport './Page3.css';\r\n\r\nconst MemoryMatch = () => {\r\n  const [cards, setCards] = useState([...Array(16).keys()].map(i => ({\r\n    id: i,\r\n    isFlipped: false,\r\n    content: i % 2 === 0 \r\n      ? '/assets/Photo1.jpeg'  // Use the image path for the heart image\r\n      : '/assets/Photo2.jpeg', // Use the image path for the diamond image\r\n  })));\r\n  \r\n  const [flippedCards, setFlippedCards] = useState([]); // To keep track of flipped cards\r\n  const [matchedCards, setMatchedCards] = useState([]); // To store matched cards\r\n  const navigate = useNavigate(); // Navigate hook to handle game completion\r\n\r\n  const flipCard = (id) => {\r\n    // Do nothing if card is already flipped or it's matched\r\n    if (flippedCards.length === 2 || matchedCards.includes(id) || cards.find(card => card.id === id).isFlipped) return;\r\n\r\n    const newCards = [...cards];\r\n    const cardIndex = newCards.findIndex(card => card.id === id);\r\n    newCards[cardIndex].isFlipped = true;\r\n    setCards(newCards);\r\n\r\n    // Add flipped card to the list\r\n    setFlippedCards(prev => [...prev, id]);\r\n\r\n    if (flippedCards.length === 1) {\r\n      // Compare the last two flipped cards\r\n      const firstCard = cards.find(card => card.id === flippedCards[0]);\r\n      const secondCard = cards.find(card => card.id === id);\r\n\r\n      if (firstCard.content === secondCard.content) {\r\n        // Cards match, mark them as matched\r\n        setMatchedCards(prev => [...prev, firstCard.id, secondCard.id]);\r\n      } else {\r\n        // If no match, flip them back after a delay\r\n        setTimeout(() => {\r\n          const resetCards = [...cards];\r\n          resetCards[cardIndex].isFlipped = false;\r\n          resetCards[cards.findIndex(card => card.id === flippedCards[0])].isFlipped = false;\r\n          setCards(resetCards);\r\n        }, 1000);\r\n      }\r\n\r\n      // Reset flipped cards\r\n      setFlippedCards([]);\r\n    }\r\n  };\r\n\r\n  // Check if the game is won\r\n  if (matchedCards.length === cards.length) {\r\n    // Redirect to next page when all pairs are matched\r\n    setTimeout(() => navigate('/game'), 1000);\r\n  }\r\n\r\n  return (\r\n    <div className=\"game-container\">\r\n      <h2>Match the images!</h2>\r\n      <div className=\"card-grid\">\r\n        {cards.map(card => (\r\n          <div\r\n            className=\"card\"\r\n            key={card.id}\r\n            onClick={() => flipCard(card.id)}\r\n          >\r\n            {card.isFlipped || matchedCards.includes(card.id) ? (\r\n              <img src={process.env.PUBLIC_URL + card.content} alt=\"card content\" />\r\n            ) : (\r\n              '❓'\r\n            )}\r\n          </div>\r\n        ))}\r\n      </div>\r\n\r\n      \r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MemoryMatch;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}