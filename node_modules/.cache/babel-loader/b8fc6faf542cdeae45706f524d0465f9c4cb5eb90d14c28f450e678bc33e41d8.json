{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\shank\\\\surprise\\\\src\\\\Pages\\\\PuzzleGame.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './PuzzleGame.css';\n\n// Define 4 unique candy colors\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst candyColors = ['#ff6666', '#66ccff', '#99cc66', '#ffcc33'];\n\n// Function to generate a random candy color from the 4 available candies\nconst generateRandomCandy = () => {\n  return candyColors[Math.floor(Math.random() * candyColors.length)];\n};\nconst PuzzleGame = ({\n  level\n}) => {\n  _s();\n  const [gameBoard, setGameBoard] = useState([]);\n  const [isGameWon, setIsGameWon] = useState(false);\n  const [showHowToPlay, setShowHowToPlay] = useState(true);\n\n  // Initialize the board with random candies (3x3 grid for 9 candies)\n  const initializeBoard = () => {\n    const rows = 3; // 3 rows\n    const cols = 3; // 3 columns\n    const board = [];\n    for (let row = 0; row < rows; row++) {\n      const rowArray = [];\n      for (let col = 0; col < cols; col++) {\n        rowArray.push(generateRandomCandy());\n      }\n      board.push(rowArray);\n    }\n    setGameBoard(board);\n  };\n\n  // Check for horizontal matches of 3\n  const checkHorizontalMatches = () => {\n    let newBoard = [...gameBoard];\n    let matches = [];\n    for (let row = 0; row < 3; row++) {\n      for (let col = 0; col < 1; col++) {\n        // Only check up to col 1 for 3-item match\n        if (newBoard[row][col] === newBoard[row][col + 1] && newBoard[row][col] === newBoard[row][col + 2]) {\n          matches.push([row, col], [row, col + 1], [row, col + 2]);\n        }\n      }\n    }\n    return matches;\n  };\n\n  // Check for vertical matches of 3\n  const checkVerticalMatches = () => {\n    let newBoard = [...gameBoard];\n    let matches = [];\n    for (let col = 0; col < 3; col++) {\n      for (let row = 0; row < 1; row++) {\n        // Only check up to row 1 for 3-item match\n        if (newBoard[row][col] === newBoard[row + 1][col] && newBoard[row][col] === newBoard[row + 2][col]) {\n          matches.push([row, col], [row + 1, col], [row + 2, col]);\n        }\n      }\n    }\n    return matches;\n  };\n\n  // Check for matches (both horizontal and vertical)\n  const checkMatches = () => {\n    let newBoard = [...gameBoard];\n    const horizontalMatches = checkHorizontalMatches();\n    const verticalMatches = checkVerticalMatches();\n    const allMatches = [...horizontalMatches, ...verticalMatches];\n    if (allMatches.length > 0) {\n      // Mark matched candies as null (clearing them)\n      allMatches.forEach(([row, col]) => {\n        newBoard[row][col] = null;\n      });\n      setGameBoard(newBoard);\n      return true;\n    }\n    return false;\n  };\n\n  // After matching candies, drop new ones to fill empty spots\n  const dropCandies = () => {\n    let newBoard = [...gameBoard];\n    for (let col = 0; col < 3; col++) {\n      // Fill empty spots by shifting candies down\n      for (let row = 2; row >= 0; row--) {\n        if (newBoard[row][col] === null) {\n          for (let r = row - 1; r >= 0; r--) {\n            if (newBoard[r][col] !== null) {\n              newBoard[row][col] = newBoard[r][col];\n              newBoard[r][col] = null;\n              break;\n            }\n          }\n        }\n      }\n    }\n\n    // Fill the empty spots at the top with random candies\n    for (let row = 0; row < 3; row++) {\n      for (let col = 0; col < 3; col++) {\n        if (newBoard[row][col] === null) {\n          newBoard[row][col] = generateRandomCandy();\n        }\n      }\n    }\n    setGameBoard(newBoard);\n  };\n\n  // Check if the game is won (e.g., if the board is filled)\n  const checkWin = () => {\n    const filled = gameBoard.every(row => row.every(cell => cell !== null));\n    if (filled) {\n      setIsGameWon(true);\n    }\n  };\n\n  // Handle candy click (swap candies)\n  const handleCandyClick = (row, col) => {\n    let newBoard = [...gameBoard];\n    if (row < 2) {\n      let temp = newBoard[row][col];\n      newBoard[row][col] = newBoard[row + 1][col];\n      newBoard[row + 1][col] = temp;\n      setGameBoard(newBoard);\n\n      // Check if the swap resulted in matches\n      if (!checkMatches()) {\n        // If no match, swap back\n        temp = newBoard[row][col];\n        newBoard[row][col] = newBoard[row + 1][col];\n        newBoard[row + 1][col] = temp;\n        setGameBoard(newBoard);\n      } else {\n        // After matching, drop new candies\n        dropCandies();\n        checkWin();\n      }\n    }\n  };\n  useEffect(() => {\n    initializeBoard();\n  }, [level]);\n  useEffect(() => {\n    if (isGameWon) {\n      setTimeout(() => {\n        alert(\"Congratulations, you won this level!\");\n      }, 1000);\n    }\n  }, [isGameWon]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Level \", level]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"how-to-play-btn\",\n      onClick: () => setShowHowToPlay(!showHowToPlay),\n      children: showHowToPlay ? 'Hide Instructions' : 'How to Play'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 7\n    }, this), showHowToPlay && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"how-to-play\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"How to Play\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Click on a candy to swap it with an adjacent one.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Match 3 or more candies of the same color in a row or column.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 180,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"When you make a match, those candies will disappear, and new ones will drop down.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: \"Your goal is to fill the board with candies and win the level!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 182,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"scoreboard\",\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"score-label\",\n        children: \"Score:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: \"score\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-board\",\n      children: gameBoard.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"game-row\",\n        children: row.map((cell, colIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"game-cell\",\n          style: {\n            backgroundColor: cell\n          },\n          onClick: () => handleCandyClick(rowIndex, colIndex)\n        }, colIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 15\n        }, this))\n      }, rowIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 7\n    }, this), isGameWon && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"win-message\",\n      children: \"You Won this Level!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 21\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 166,\n    columnNumber: 5\n  }, this);\n};\n_s(PuzzleGame, \"/eyggKex93jb9F6K04TTDdVKKZs=\");\n_c = PuzzleGame;\nexport default PuzzleGame;\nvar _c;\n$RefreshReg$(_c, \"PuzzleGame\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","candyColors","generateRandomCandy","Math","floor","random","length","PuzzleGame","level","_s","gameBoard","setGameBoard","isGameWon","setIsGameWon","showHowToPlay","setShowHowToPlay","initializeBoard","rows","cols","board","row","rowArray","col","push","checkHorizontalMatches","newBoard","matches","checkVerticalMatches","checkMatches","horizontalMatches","verticalMatches","allMatches","forEach","dropCandies","r","checkWin","filled","every","cell","handleCandyClick","temp","setTimeout","alert","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","map","rowIndex","colIndex","style","backgroundColor","_c","$RefreshReg$"],"sources":["C:/Users/shank/surprise/src/Pages/PuzzleGame.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './PuzzleGame.css';\r\n\r\n// Define 4 unique candy colors\r\nconst candyColors = [\r\n  '#ff6666', '#66ccff', '#99cc66', '#ffcc33',\r\n];\r\n\r\n// Function to generate a random candy color from the 4 available candies\r\nconst generateRandomCandy = () => {\r\n  return candyColors[Math.floor(Math.random() * candyColors.length)];\r\n};\r\n\r\nconst PuzzleGame = ({ level }) => {\r\n  const [gameBoard, setGameBoard] = useState([]);\r\n  const [isGameWon, setIsGameWon] = useState(false);\r\n  const [showHowToPlay, setShowHowToPlay] = useState(true);\r\n\r\n  // Initialize the board with random candies (3x3 grid for 9 candies)\r\n  const initializeBoard = () => {\r\n    const rows = 3;  // 3 rows\r\n    const cols = 3;  // 3 columns\r\n    const board = [];\r\n\r\n    for (let row = 0; row < rows; row++) {\r\n      const rowArray = [];\r\n      for (let col = 0; col < cols; col++) {\r\n        rowArray.push(generateRandomCandy());\r\n      }\r\n      board.push(rowArray);\r\n    }\r\n\r\n    setGameBoard(board);\r\n  };\r\n\r\n  // Check for horizontal matches of 3\r\n  const checkHorizontalMatches = () => {\r\n    let newBoard = [...gameBoard];\r\n    let matches = [];\r\n\r\n    for (let row = 0; row < 3; row++) {\r\n      for (let col = 0; col < 1; col++) {  // Only check up to col 1 for 3-item match\r\n        if (\r\n          newBoard[row][col] === newBoard[row][col + 1] &&\r\n          newBoard[row][col] === newBoard[row][col + 2]\r\n        ) {\r\n          matches.push([row, col], [row, col + 1], [row, col + 2]);\r\n        }\r\n      }\r\n    }\r\n    return matches;\r\n  };\r\n\r\n  // Check for vertical matches of 3\r\n  const checkVerticalMatches = () => {\r\n    let newBoard = [...gameBoard];\r\n    let matches = [];\r\n\r\n    for (let col = 0; col < 3; col++) {\r\n      for (let row = 0; row < 1; row++) {  // Only check up to row 1 for 3-item match\r\n        if (\r\n          newBoard[row][col] === newBoard[row + 1][col] &&\r\n          newBoard[row][col] === newBoard[row + 2][col]\r\n        ) {\r\n          matches.push([row, col], [row + 1, col], [row + 2, col]);\r\n        }\r\n      }\r\n    }\r\n    return matches;\r\n  };\r\n\r\n  // Check for matches (both horizontal and vertical)\r\n  const checkMatches = () => {\r\n    let newBoard = [...gameBoard];\r\n    const horizontalMatches = checkHorizontalMatches();\r\n    const verticalMatches = checkVerticalMatches();\r\n\r\n    const allMatches = [...horizontalMatches, ...verticalMatches];\r\n\r\n    if (allMatches.length > 0) {\r\n      // Mark matched candies as null (clearing them)\r\n      allMatches.forEach(([row, col]) => {\r\n        newBoard[row][col] = null;\r\n      });\r\n      setGameBoard(newBoard);\r\n      return true;\r\n    }\r\n    return false;\r\n  };\r\n\r\n  // After matching candies, drop new ones to fill empty spots\r\n  const dropCandies = () => {\r\n    let newBoard = [...gameBoard];\r\n    for (let col = 0; col < 3; col++) {\r\n      // Fill empty spots by shifting candies down\r\n      for (let row = 2; row >= 0; row--) {\r\n        if (newBoard[row][col] === null) {\r\n          for (let r = row - 1; r >= 0; r--) {\r\n            if (newBoard[r][col] !== null) {\r\n              newBoard[row][col] = newBoard[r][col];\r\n              newBoard[r][col] = null;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    // Fill the empty spots at the top with random candies\r\n    for (let row = 0; row < 3; row++) {\r\n      for (let col = 0; col < 3; col++) {\r\n        if (newBoard[row][col] === null) {\r\n          newBoard[row][col] = generateRandomCandy();\r\n        }\r\n      }\r\n    }\r\n\r\n    setGameBoard(newBoard);\r\n  };\r\n\r\n  // Check if the game is won (e.g., if the board is filled)\r\n  const checkWin = () => {\r\n    const filled = gameBoard.every(row => row.every(cell => cell !== null));\r\n    if (filled) {\r\n      setIsGameWon(true);\r\n    }\r\n  };\r\n\r\n  // Handle candy click (swap candies)\r\n  const handleCandyClick = (row, col) => {\r\n    let newBoard = [...gameBoard];\r\n    if (row < 2) {\r\n      let temp = newBoard[row][col];\r\n      newBoard[row][col] = newBoard[row + 1][col];\r\n      newBoard[row + 1][col] = temp;\r\n      setGameBoard(newBoard);\r\n\r\n      // Check if the swap resulted in matches\r\n      if (!checkMatches()) {\r\n        // If no match, swap back\r\n        temp = newBoard[row][col];\r\n        newBoard[row][col] = newBoard[row + 1][col];\r\n        newBoard[row + 1][col] = temp;\r\n        setGameBoard(newBoard);\r\n      } else {\r\n        // After matching, drop new candies\r\n        dropCandies();\r\n        checkWin();\r\n      }\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    initializeBoard();\r\n  }, [level]);\r\n\r\n  useEffect(() => {\r\n    if (isGameWon) {\r\n      setTimeout(() => {\r\n        alert(\"Congratulations, you won this level!\");\r\n      }, 1000);\r\n    }\r\n  }, [isGameWon]);\r\n\r\n  return (\r\n    <div className=\"game-container\">\r\n      <h1>Level {level}</h1>\r\n\r\n      {/* How-to-play toggle button */}\r\n      <button className=\"how-to-play-btn\" onClick={() => setShowHowToPlay(!showHowToPlay)}>\r\n        {showHowToPlay ? 'Hide Instructions' : 'How to Play'}\r\n      </button>\r\n\r\n      {/* How-to-play instructions */}\r\n      {showHowToPlay && (\r\n        <div className=\"how-to-play\">\r\n          <h2>How to Play</h2>\r\n          <ul>\r\n            <li>Click on a candy to swap it with an adjacent one.</li>\r\n            <li>Match 3 or more candies of the same color in a row or column.</li>\r\n            <li>When you make a match, those candies will disappear, and new ones will drop down.</li>\r\n            <li>Your goal is to fill the board with candies and win the level!</li>\r\n          </ul>\r\n        </div>\r\n      )}\r\n\r\n      <div className=\"scoreboard\">\r\n        <span className=\"score-label\">Score:</span>\r\n        <span className=\"score\">{/* Add your score calculation logic here */}</span>\r\n      </div>\r\n\r\n      <div className=\"game-board\">\r\n        {gameBoard.map((row, rowIndex) => (\r\n          <div key={rowIndex} className=\"game-row\">\r\n            {row.map((cell, colIndex) => (\r\n              <div\r\n                key={colIndex}\r\n                className=\"game-cell\"\r\n                style={{ backgroundColor: cell }}\r\n                onClick={() => handleCandyClick(rowIndex, colIndex)}\r\n              />\r\n            ))}\r\n          </div>\r\n        ))}\r\n      </div>\r\n\r\n      {isGameWon && <div className=\"win-message\">You Won this Level!</div>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PuzzleGame;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAO,kBAAkB;;AAEzB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,WAAW,GAAG,CAClB,SAAS,EAAE,SAAS,EAAE,SAAS,EAAE,SAAS,CAC3C;;AAED;AACA,MAAMC,mBAAmB,GAAGA,CAAA,KAAM;EAChC,OAAOD,WAAW,CAACE,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,GAAGJ,WAAW,CAACK,MAAM,CAAC,CAAC;AACpE,CAAC;AAED,MAAMC,UAAU,GAAGA,CAAC;EAAEC;AAAM,CAAC,KAAK;EAAAC,EAAA;EAChC,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACe,SAAS,EAAEC,YAAY,CAAC,GAAGhB,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACiB,aAAa,EAAEC,gBAAgB,CAAC,GAAGlB,QAAQ,CAAC,IAAI,CAAC;;EAExD;EACA,MAAMmB,eAAe,GAAGA,CAAA,KAAM;IAC5B,MAAMC,IAAI,GAAG,CAAC,CAAC,CAAE;IACjB,MAAMC,IAAI,GAAG,CAAC,CAAC,CAAE;IACjB,MAAMC,KAAK,GAAG,EAAE;IAEhB,KAAK,IAAIC,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAGH,IAAI,EAAEG,GAAG,EAAE,EAAE;MACnC,MAAMC,QAAQ,GAAG,EAAE;MACnB,KAAK,IAAIC,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAGJ,IAAI,EAAEI,GAAG,EAAE,EAAE;QACnCD,QAAQ,CAACE,IAAI,CAACrB,mBAAmB,CAAC,CAAC,CAAC;MACtC;MACAiB,KAAK,CAACI,IAAI,CAACF,QAAQ,CAAC;IACtB;IAEAV,YAAY,CAACQ,KAAK,CAAC;EACrB,CAAC;;EAED;EACA,MAAMK,sBAAsB,GAAGA,CAAA,KAAM;IACnC,IAAIC,QAAQ,GAAG,CAAC,GAAGf,SAAS,CAAC;IAC7B,IAAIgB,OAAO,GAAG,EAAE;IAEhB,KAAK,IAAIN,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAG,CAAC,EAAEA,GAAG,EAAE,EAAE;MAChC,KAAK,IAAIE,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAG,CAAC,EAAEA,GAAG,EAAE,EAAE;QAAG;QACnC,IACEG,QAAQ,CAACL,GAAG,CAAC,CAACE,GAAG,CAAC,KAAKG,QAAQ,CAACL,GAAG,CAAC,CAACE,GAAG,GAAG,CAAC,CAAC,IAC7CG,QAAQ,CAACL,GAAG,CAAC,CAACE,GAAG,CAAC,KAAKG,QAAQ,CAACL,GAAG,CAAC,CAACE,GAAG,GAAG,CAAC,CAAC,EAC7C;UACAI,OAAO,CAACH,IAAI,CAAC,CAACH,GAAG,EAAEE,GAAG,CAAC,EAAE,CAACF,GAAG,EAAEE,GAAG,GAAG,CAAC,CAAC,EAAE,CAACF,GAAG,EAAEE,GAAG,GAAG,CAAC,CAAC,CAAC;QAC1D;MACF;IACF;IACA,OAAOI,OAAO;EAChB,CAAC;;EAED;EACA,MAAMC,oBAAoB,GAAGA,CAAA,KAAM;IACjC,IAAIF,QAAQ,GAAG,CAAC,GAAGf,SAAS,CAAC;IAC7B,IAAIgB,OAAO,GAAG,EAAE;IAEhB,KAAK,IAAIJ,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAG,CAAC,EAAEA,GAAG,EAAE,EAAE;MAChC,KAAK,IAAIF,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAG,CAAC,EAAEA,GAAG,EAAE,EAAE;QAAG;QACnC,IACEK,QAAQ,CAACL,GAAG,CAAC,CAACE,GAAG,CAAC,KAAKG,QAAQ,CAACL,GAAG,GAAG,CAAC,CAAC,CAACE,GAAG,CAAC,IAC7CG,QAAQ,CAACL,GAAG,CAAC,CAACE,GAAG,CAAC,KAAKG,QAAQ,CAACL,GAAG,GAAG,CAAC,CAAC,CAACE,GAAG,CAAC,EAC7C;UACAI,OAAO,CAACH,IAAI,CAAC,CAACH,GAAG,EAAEE,GAAG,CAAC,EAAE,CAACF,GAAG,GAAG,CAAC,EAAEE,GAAG,CAAC,EAAE,CAACF,GAAG,GAAG,CAAC,EAAEE,GAAG,CAAC,CAAC;QAC1D;MACF;IACF;IACA,OAAOI,OAAO;EAChB,CAAC;;EAED;EACA,MAAME,YAAY,GAAGA,CAAA,KAAM;IACzB,IAAIH,QAAQ,GAAG,CAAC,GAAGf,SAAS,CAAC;IAC7B,MAAMmB,iBAAiB,GAAGL,sBAAsB,CAAC,CAAC;IAClD,MAAMM,eAAe,GAAGH,oBAAoB,CAAC,CAAC;IAE9C,MAAMI,UAAU,GAAG,CAAC,GAAGF,iBAAiB,EAAE,GAAGC,eAAe,CAAC;IAE7D,IAAIC,UAAU,CAACzB,MAAM,GAAG,CAAC,EAAE;MACzB;MACAyB,UAAU,CAACC,OAAO,CAAC,CAAC,CAACZ,GAAG,EAAEE,GAAG,CAAC,KAAK;QACjCG,QAAQ,CAACL,GAAG,CAAC,CAACE,GAAG,CAAC,GAAG,IAAI;MAC3B,CAAC,CAAC;MACFX,YAAY,CAACc,QAAQ,CAAC;MACtB,OAAO,IAAI;IACb;IACA,OAAO,KAAK;EACd,CAAC;;EAED;EACA,MAAMQ,WAAW,GAAGA,CAAA,KAAM;IACxB,IAAIR,QAAQ,GAAG,CAAC,GAAGf,SAAS,CAAC;IAC7B,KAAK,IAAIY,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAG,CAAC,EAAEA,GAAG,EAAE,EAAE;MAChC;MACA,KAAK,IAAIF,GAAG,GAAG,CAAC,EAAEA,GAAG,IAAI,CAAC,EAAEA,GAAG,EAAE,EAAE;QACjC,IAAIK,QAAQ,CAACL,GAAG,CAAC,CAACE,GAAG,CAAC,KAAK,IAAI,EAAE;UAC/B,KAAK,IAAIY,CAAC,GAAGd,GAAG,GAAG,CAAC,EAAEc,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;YACjC,IAAIT,QAAQ,CAACS,CAAC,CAAC,CAACZ,GAAG,CAAC,KAAK,IAAI,EAAE;cAC7BG,QAAQ,CAACL,GAAG,CAAC,CAACE,GAAG,CAAC,GAAGG,QAAQ,CAACS,CAAC,CAAC,CAACZ,GAAG,CAAC;cACrCG,QAAQ,CAACS,CAAC,CAAC,CAACZ,GAAG,CAAC,GAAG,IAAI;cACvB;YACF;UACF;QACF;MACF;IACF;;IAEA;IACA,KAAK,IAAIF,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAG,CAAC,EAAEA,GAAG,EAAE,EAAE;MAChC,KAAK,IAAIE,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAG,CAAC,EAAEA,GAAG,EAAE,EAAE;QAChC,IAAIG,QAAQ,CAACL,GAAG,CAAC,CAACE,GAAG,CAAC,KAAK,IAAI,EAAE;UAC/BG,QAAQ,CAACL,GAAG,CAAC,CAACE,GAAG,CAAC,GAAGpB,mBAAmB,CAAC,CAAC;QAC5C;MACF;IACF;IAEAS,YAAY,CAACc,QAAQ,CAAC;EACxB,CAAC;;EAED;EACA,MAAMU,QAAQ,GAAGA,CAAA,KAAM;IACrB,MAAMC,MAAM,GAAG1B,SAAS,CAAC2B,KAAK,CAACjB,GAAG,IAAIA,GAAG,CAACiB,KAAK,CAACC,IAAI,IAAIA,IAAI,KAAK,IAAI,CAAC,CAAC;IACvE,IAAIF,MAAM,EAAE;MACVvB,YAAY,CAAC,IAAI,CAAC;IACpB;EACF,CAAC;;EAED;EACA,MAAM0B,gBAAgB,GAAGA,CAACnB,GAAG,EAAEE,GAAG,KAAK;IACrC,IAAIG,QAAQ,GAAG,CAAC,GAAGf,SAAS,CAAC;IAC7B,IAAIU,GAAG,GAAG,CAAC,EAAE;MACX,IAAIoB,IAAI,GAAGf,QAAQ,CAACL,GAAG,CAAC,CAACE,GAAG,CAAC;MAC7BG,QAAQ,CAACL,GAAG,CAAC,CAACE,GAAG,CAAC,GAAGG,QAAQ,CAACL,GAAG,GAAG,CAAC,CAAC,CAACE,GAAG,CAAC;MAC3CG,QAAQ,CAACL,GAAG,GAAG,CAAC,CAAC,CAACE,GAAG,CAAC,GAAGkB,IAAI;MAC7B7B,YAAY,CAACc,QAAQ,CAAC;;MAEtB;MACA,IAAI,CAACG,YAAY,CAAC,CAAC,EAAE;QACnB;QACAY,IAAI,GAAGf,QAAQ,CAACL,GAAG,CAAC,CAACE,GAAG,CAAC;QACzBG,QAAQ,CAACL,GAAG,CAAC,CAACE,GAAG,CAAC,GAAGG,QAAQ,CAACL,GAAG,GAAG,CAAC,CAAC,CAACE,GAAG,CAAC;QAC3CG,QAAQ,CAACL,GAAG,GAAG,CAAC,CAAC,CAACE,GAAG,CAAC,GAAGkB,IAAI;QAC7B7B,YAAY,CAACc,QAAQ,CAAC;MACxB,CAAC,MAAM;QACL;QACAQ,WAAW,CAAC,CAAC;QACbE,QAAQ,CAAC,CAAC;MACZ;IACF;EACF,CAAC;EAEDrC,SAAS,CAAC,MAAM;IACdkB,eAAe,CAAC,CAAC;EACnB,CAAC,EAAE,CAACR,KAAK,CAAC,CAAC;EAEXV,SAAS,CAAC,MAAM;IACd,IAAIc,SAAS,EAAE;MACb6B,UAAU,CAAC,MAAM;QACfC,KAAK,CAAC,sCAAsC,CAAC;MAC/C,CAAC,EAAE,IAAI,CAAC;IACV;EACF,CAAC,EAAE,CAAC9B,SAAS,CAAC,CAAC;EAEf,oBACEZ,OAAA;IAAK2C,SAAS,EAAC,gBAAgB;IAAAC,QAAA,gBAC7B5C,OAAA;MAAA4C,QAAA,GAAI,QAAM,EAACpC,KAAK;IAAA;MAAAqC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eAGtBhD,OAAA;MAAQ2C,SAAS,EAAC,iBAAiB;MAACM,OAAO,EAAEA,CAAA,KAAMlC,gBAAgB,CAAC,CAACD,aAAa,CAAE;MAAA8B,QAAA,EACjF9B,aAAa,GAAG,mBAAmB,GAAG;IAAa;MAAA+B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC9C,CAAC,EAGRlC,aAAa,iBACZd,OAAA;MAAK2C,SAAS,EAAC,aAAa;MAAAC,QAAA,gBAC1B5C,OAAA;QAAA4C,QAAA,EAAI;MAAW;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACpBhD,OAAA;QAAA4C,QAAA,gBACE5C,OAAA;UAAA4C,QAAA,EAAI;QAAiD;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAC1DhD,OAAA;UAAA4C,QAAA,EAAI;QAA6D;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACtEhD,OAAA;UAAA4C,QAAA,EAAI;QAAiF;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAC1FhD,OAAA;UAAA4C,QAAA,EAAI;QAA8D;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACrE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF,CACN,eAEDhD,OAAA;MAAK2C,SAAS,EAAC,YAAY;MAAAC,QAAA,gBACzB5C,OAAA;QAAM2C,SAAS,EAAC,aAAa;QAAAC,QAAA,EAAC;MAAM;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC,eAC3ChD,OAAA;QAAM2C,SAAS,EAAC;MAAO;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAoD,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACzE,CAAC,eAENhD,OAAA;MAAK2C,SAAS,EAAC,YAAY;MAAAC,QAAA,EACxBlC,SAAS,CAACwC,GAAG,CAAC,CAAC9B,GAAG,EAAE+B,QAAQ,kBAC3BnD,OAAA;QAAoB2C,SAAS,EAAC,UAAU;QAAAC,QAAA,EACrCxB,GAAG,CAAC8B,GAAG,CAAC,CAACZ,IAAI,EAAEc,QAAQ,kBACtBpD,OAAA;UAEE2C,SAAS,EAAC,WAAW;UACrBU,KAAK,EAAE;YAAEC,eAAe,EAAEhB;UAAK,CAAE;UACjCW,OAAO,EAAEA,CAAA,KAAMV,gBAAgB,CAACY,QAAQ,EAAEC,QAAQ;QAAE,GAH/CA,QAAQ;UAAAP,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAId,CACF;MAAC,GARMG,QAAQ;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OASb,CACN;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACC,CAAC,EAELpC,SAAS,iBAAIZ,OAAA;MAAK2C,SAAS,EAAC,aAAa;MAAAC,QAAA,EAAC;IAAmB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACjE,CAAC;AAEV,CAAC;AAACvC,EAAA,CApMIF,UAAU;AAAAgD,EAAA,GAAVhD,UAAU;AAsMhB,eAAeA,UAAU;AAAC,IAAAgD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}