{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\shank\\\\surprise\\\\src\\\\Pages\\\\PuzzleGame.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './PuzzleGame.css';\n\n// Function to generate a solvable 3x3 Sudoku puzzle\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction generatePuzzle() {\n  const validPuzzle = [[1, 0, 3], [0, 3, 0], [0, 0, 2]];\n\n  // A simple solvable Sudoku puzzle. You can expand or randomize the puzzle generation logic here.\n  return validPuzzle;\n}\nconst Puzzle = () => {\n  _s();\n  const [showHowToPlay, setShowHowToPlay] = useState(false);\n  const [gameStatus, setGameStatus] = useState(\"\"); // 'win' or 'lose'\n  const [grid, setGrid] = useState(generatePuzzle()); // Initialize with a valid puzzle\n  const [showSolution, setShowSolution] = useState(false); // Track whether to show the solution\n\n  // Toggle visibility of the How to Play instructions\n  const toggleHowToPlay = () => {\n    setShowHowToPlay(!showHowToPlay);\n  };\n\n  // Handle changes to the grid cells, but prevent editing pre-filled cells\n  const handleChange = (e, row, col) => {\n    if (grid[row][col] === 0) {\n      const newGrid = grid.map((rowArray, rowIndex) => rowIndex === row ? rowArray.map((value, colIndex) => colIndex === col ? parseInt(e.target.value) : value) : rowArray);\n      setGrid(newGrid);\n    }\n  };\n\n  // Check if the current grid is a valid solved puzzle\n  const checkSolution = () => {\n    const isValid = checkRows() && checkColumns();\n    if (isValid) {\n      setGameStatus(\"win\");\n      setTimeout(() => {\n        alert(\"You win! Redirecting to a new game...\");\n        resetGame();\n      }, 500);\n    } else if (isGridFilled()) {\n      setGameStatus(\"lose\");\n      setTimeout(() => {\n        const retry = window.confirm(\"You lost! Do you want to try again?\");\n        if (retry) {\n          resetGame();\n        }\n      }, 500);\n    }\n  };\n\n  // Check if the grid is completely filled with numbers\n  const isGridFilled = () => {\n    return grid.every(row => row.every(cell => cell !== 0));\n  };\n\n  // Check if rows contain numbers 1 to 3 with no repetition\n  const checkRows = () => {\n    return grid.every(row => {\n      const uniqueValues = new Set(row);\n      return uniqueValues.size === row.length && !row.includes(0);\n    });\n  };\n\n  // Check if columns contain numbers 1 to 3 with no repetition\n  const checkColumns = () => {\n    for (let col = 0; col < 3; col++) {\n      const column = [grid[0][col], grid[1][col], grid[2][col]];\n      const uniqueValues = new Set(column);\n      if (uniqueValues.size !== column.length || column.includes(0)) {\n        return false;\n      }\n    }\n    return true;\n  };\n\n  // Reset the game grid to a new puzzle\n  const resetGame = () => {\n    setGameStatus(\"\"); // Reset game status\n    setGrid(generatePuzzle()); // Reset grid with a new valid puzzle\n  };\n\n  // Function to toggle showing the solution\n\n  // Automatically check the solution when grid is filled\n  useEffect(() => {\n    if (isGridFilled()) {\n      checkSolution();\n    }\n  }, [grid]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"puzzle-wrapper\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"left-side\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"how-to-play-btn\",\n        onClick: toggleHowToPlay,\n        children: showHowToPlay ? 'Hide How to Play' : 'How to Play'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this), showHowToPlay && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"how-to-play\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"How to Play:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"The goal of Sudoku is to fill the grid with numbers such that:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: [/*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"Each row contains the numbers 1 through 3 (without repeating).\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"Each column contains the numbers 1 through 3 (without repeating).\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Fill in the blanks and try to solve the puzzle!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"right-side\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"title\",\n        children: \"3x3 Sudoku\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"puzzle-container\",\n        children: renderGrid()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 9\n      }, this), gameStatus === \"win\" && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"win-message\",\n        children: \"You Win! Redirecting to a new game...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 34\n      }, this), gameStatus === \"lose\" && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"lose-message\",\n        children: \"Try again! You can do it!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 35\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 5\n  }, this);\n};\n_s(Puzzle, \"zY6OZFehYAcWba3Rxb+vBoNh/uw=\");\n_c = Puzzle;\nexport default Puzzle;\nvar _c;\n$RefreshReg$(_c, \"Puzzle\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","generatePuzzle","validPuzzle","Puzzle","_s","showHowToPlay","setShowHowToPlay","gameStatus","setGameStatus","grid","setGrid","showSolution","setShowSolution","toggleHowToPlay","handleChange","e","row","col","newGrid","map","rowArray","rowIndex","value","colIndex","parseInt","target","checkSolution","isValid","checkRows","checkColumns","setTimeout","alert","resetGame","isGridFilled","retry","window","confirm","every","cell","uniqueValues","Set","size","length","includes","column","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","renderGrid","_c","$RefreshReg$"],"sources":["C:/Users/shank/surprise/src/Pages/PuzzleGame.js"],"sourcesContent":["import React, { useState,useEffect } from 'react';\r\nimport './PuzzleGame.css';\r\n\r\n// Function to generate a solvable 3x3 Sudoku puzzle\r\nfunction generatePuzzle() {\r\n  const validPuzzle = [\r\n    [1, 0, 3],\r\n    [0, 3, 0],\r\n    [0, 0, 2],\r\n  ];\r\n\r\n  // A simple solvable Sudoku puzzle. You can expand or randomize the puzzle generation logic here.\r\n  return validPuzzle;\r\n}\r\nconst Puzzle = () => {\r\n  const [showHowToPlay, setShowHowToPlay] = useState(false);\r\n  const [gameStatus, setGameStatus] = useState(\"\"); // 'win' or 'lose'\r\n  const [grid, setGrid] = useState(generatePuzzle()); // Initialize with a valid puzzle\r\n  const [showSolution, setShowSolution] = useState(false); // Track whether to show the solution\r\n\r\n  // Toggle visibility of the How to Play instructions\r\n  const toggleHowToPlay = () => {\r\n    setShowHowToPlay(!showHowToPlay);\r\n  };\r\n\r\n  // Handle changes to the grid cells, but prevent editing pre-filled cells\r\n  const handleChange = (e, row, col) => {\r\n    if (grid[row][col] === 0) {\r\n      const newGrid = grid.map((rowArray, rowIndex) =>\r\n        rowIndex === row\r\n          ? rowArray.map((value, colIndex) =>\r\n              colIndex === col ? parseInt(e.target.value) : value\r\n            )\r\n          : rowArray\r\n      );\r\n      setGrid(newGrid);\r\n    }\r\n  };\r\n\r\n  // Check if the current grid is a valid solved puzzle\r\n  const checkSolution = () => {\r\n    const isValid = checkRows() && checkColumns();\r\n    if (isValid) {\r\n      setGameStatus(\"win\");\r\n      setTimeout(() => {\r\n        alert(\"You win! Redirecting to a new game...\");\r\n        resetGame();\r\n      }, 500);\r\n    } else if (isGridFilled()) {\r\n      setGameStatus(\"lose\");\r\n      setTimeout(() => {\r\n        const retry = window.confirm(\"You lost! Do you want to try again?\");\r\n        if (retry) {\r\n          resetGame();\r\n        }\r\n      }, 500);\r\n    }\r\n  };\r\n\r\n  // Check if the grid is completely filled with numbers\r\n  const isGridFilled = () => {\r\n    return grid.every(row => row.every(cell => cell !== 0));\r\n  };\r\n\r\n  // Check if rows contain numbers 1 to 3 with no repetition\r\n  const checkRows = () => {\r\n    return grid.every(row => {\r\n      const uniqueValues = new Set(row);\r\n      return uniqueValues.size === row.length && !row.includes(0);\r\n    });\r\n  };\r\n\r\n  // Check if columns contain numbers 1 to 3 with no repetition\r\n  const checkColumns = () => {\r\n    for (let col = 0; col < 3; col++) {\r\n      const column = [grid[0][col], grid[1][col], grid[2][col]];\r\n      const uniqueValues = new Set(column);\r\n      if (uniqueValues.size !== column.length || column.includes(0)) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  };\r\n\r\n  // Reset the game grid to a new puzzle\r\n  const resetGame = () => {\r\n    setGameStatus(\"\"); // Reset game status\r\n    setGrid(generatePuzzle()); // Reset grid with a new valid puzzle\r\n  };\r\n\r\n  // Function to toggle showing the solution\r\n\r\n\r\n  // Automatically check the solution when grid is filled\r\n  useEffect(() => {\r\n    if (isGridFilled()) {\r\n      checkSolution();\r\n    }\r\n  }, [grid]);\r\n\r\n  return (\r\n    <div className=\"puzzle-wrapper\">\r\n      <div className=\"left-side\">\r\n        <button className=\"how-to-play-btn\" onClick={toggleHowToPlay}>\r\n          {showHowToPlay ? 'Hide How to Play' : 'How to Play'}\r\n        </button>\r\n\r\n        {showHowToPlay && (\r\n          <div className=\"how-to-play\">\r\n            <h2>How to Play:</h2>\r\n            <p>\r\n              The goal of Sudoku is to fill the grid with numbers such that:\r\n            </p>\r\n            <ul>\r\n              <li>Each row contains the numbers 1 through 3 (without repeating).</li>\r\n              <li>Each column contains the numbers 1 through 3 (without repeating).</li>\r\n            </ul>\r\n            <p>Fill in the blanks and try to solve the puzzle!</p>\r\n          </div>\r\n        )}\r\n\r\n        </div>\r\n\r\n      <div className=\"right-side\">\r\n        <h1 className=\"title\">3x3 Sudoku</h1>\r\n        <div className=\"puzzle-container\">{renderGrid()}</div>\r\n        {gameStatus === \"win\" && <div className=\"win-message\">You Win! Redirecting to a new game...</div>}\r\n        {gameStatus === \"lose\" && <div className=\"lose-message\">Try again! You can do it!</div>}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Puzzle;\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}