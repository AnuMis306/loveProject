{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\shank\\\\surprise\\\\src\\\\Pages\\\\PuzzleGame.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Puzzle = () => {\n  _s();\n  // State for showing/hiding \"How to Play\"\n  const [showHowToPlay, setShowHowToPlay] = useState(false);\n\n  // Toggle the display of How to Play instructions\n  const toggleHowToPlay = () => {\n    setShowHowToPlay(!showHowToPlay);\n  };\n\n  // Initial Sudoku puzzle with pre-filled cells (represented by non-zero numbers)\n  const initialPuzzle = [[1, 0, 3], [0, 2, 0], [0, 0, 1]];\n\n  // State to keep track of the puzzle grid\n  const [grid, setGrid] = useState(initialPuzzle);\n\n  // Handle changes to the grid cells, but prevent editing pre-filled cells\n  const handleChange = (e, row, col) => {\n    // Prevent modification if the cell is pre-filled (non-zero value)\n    if (grid[row][col] === 0) {\n      const newGrid = grid.map((rowArray, rowIndex) => rowIndex === row ? rowArray.map((value, colIndex) => colIndex === col ? parseInt(e.target.value) : value) : rowArray);\n      setGrid(newGrid);\n    }\n  };\n\n  // Render the Sudoku grid\n  const renderGrid = () => {\n    return grid.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: row.map((cell, colIndex) => /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"number\",\n        min: \"1\",\n        max: \"3\",\n        value: cell === 0 ? '' : cell,\n        onChange: e => handleChange(e, rowIndex, colIndex),\n        className: `cell ${cell !== 0 ? 'disabled' : ''}`,\n        disabled: cell !== 0 // Disable editing for pre-filled cells\n      }, colIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 11\n      }, this))\n    }, rowIndex, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"puzzle-wrapper\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"left-side\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"how-to-play-btn\",\n        onClick: toggleHowToPlay,\n        children: showHowToPlay ? 'Hide How to Play' : 'How to Play'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 60,\n        columnNumber: 9\n      }, this), showHowToPlay && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"how-to-play\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"How to Play:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"The goal of Sudoku is to fill the grid with numbers such that:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: [/*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"Each row contains the numbers 1 through 3 (without repeating).\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 71,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"Each column contains the numbers 1 through 3 (without repeating).\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 72,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"Each 3x3 sub-grid (in this case, just one block) must contain the numbers 1 through 3 (without repeating).\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"Fill in the blanks and try to solve the puzzle!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"right-side\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"title\",\n        children: \"3x3 Sudoku\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"puzzle-container\",\n        children: renderGrid()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 58,\n    columnNumber: 5\n  }, this);\n};\n_s(Puzzle, \"FFG6Y8OON9GZmNH3jzcxu9lqkgk=\");\n_c = Puzzle;\nexport default Puzzle;\nvar _c;\n$RefreshReg$(_c, \"Puzzle\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Puzzle","_s","showHowToPlay","setShowHowToPlay","toggleHowToPlay","initialPuzzle","grid","setGrid","handleChange","e","row","col","newGrid","map","rowArray","rowIndex","value","colIndex","parseInt","target","renderGrid","className","children","cell","type","min","max","onChange","disabled","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["C:/Users/shank/surprise/src/Pages/PuzzleGame.js"],"sourcesContent":["import React, { useState } from 'react';\r\n\r\nconst Puzzle = () => {\r\n  // State for showing/hiding \"How to Play\"\r\n  const [showHowToPlay, setShowHowToPlay] = useState(false);\r\n\r\n  // Toggle the display of How to Play instructions\r\n  const toggleHowToPlay = () => {\r\n    setShowHowToPlay(!showHowToPlay);\r\n  };\r\n\r\n  // Initial Sudoku puzzle with pre-filled cells (represented by non-zero numbers)\r\n  const initialPuzzle = [\r\n    [1, 0, 3],\r\n    [0, 2, 0],\r\n    [0, 0, 1],\r\n  ];\r\n\r\n  // State to keep track of the puzzle grid\r\n  const [grid, setGrid] = useState(initialPuzzle);\r\n\r\n  // Handle changes to the grid cells, but prevent editing pre-filled cells\r\n  const handleChange = (e, row, col) => {\r\n    // Prevent modification if the cell is pre-filled (non-zero value)\r\n    if (grid[row][col] === 0) {\r\n      const newGrid = grid.map((rowArray, rowIndex) =>\r\n        rowIndex === row\r\n          ? rowArray.map((value, colIndex) =>\r\n              colIndex === col ? parseInt(e.target.value) : value\r\n            )\r\n          : rowArray\r\n      );\r\n      setGrid(newGrid);\r\n    }\r\n  };\r\n\r\n  // Render the Sudoku grid\r\n  const renderGrid = () => {\r\n    return grid.map((row, rowIndex) => (\r\n      <div className=\"row\" key={rowIndex}>\r\n        {row.map((cell, colIndex) => (\r\n          <input\r\n            key={colIndex}\r\n            type=\"number\"\r\n            min=\"1\"\r\n            max=\"3\"\r\n            value={cell === 0 ? '' : cell}\r\n            onChange={(e) => handleChange(e, rowIndex, colIndex)}\r\n            className={`cell ${cell !== 0 ? 'disabled' : ''}`}\r\n            disabled={cell !== 0} // Disable editing for pre-filled cells\r\n          />\r\n        ))}\r\n      </div>\r\n    ));\r\n  };\r\n\r\n  return (\r\n    <div className=\"puzzle-wrapper\">\r\n      <div className=\"left-side\">\r\n        <button className=\"how-to-play-btn\" onClick={toggleHowToPlay}>\r\n          {showHowToPlay ? 'Hide How to Play' : 'How to Play'}\r\n        </button>\r\n\r\n        {showHowToPlay && (\r\n          <div className=\"how-to-play\">\r\n            <h2>How to Play:</h2>\r\n            <p>\r\n              The goal of Sudoku is to fill the grid with numbers such that:\r\n            </p>\r\n            <ul>\r\n              <li>Each row contains the numbers 1 through 3 (without repeating).</li>\r\n              <li>Each column contains the numbers 1 through 3 (without repeating).</li>\r\n              <li>Each 3x3 sub-grid (in this case, just one block) must contain the numbers 1 through 3 (without repeating).</li>\r\n            </ul>\r\n            <p>Fill in the blanks and try to solve the puzzle!</p>\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      <div className=\"right-side\">\r\n        <h1 className=\"title\">3x3 Sudoku</h1>\r\n        <div className=\"puzzle-container\">{renderGrid()}</div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Puzzle;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}